<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8" /><!--[if IE]><meta http-equiv="X-UA-Compatible" content="IE=edge" /><![endif]--><meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Asciidoctor 1.5.4" /><meta name="author" content="Sol Bekic, Ricardo Gomes"><meta name="description" content="A book about LÖVE, Games and Lua."><title>LÖVE for Newbies</title><style>/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */
/* Remove comment around @import statement below when using as a custom stylesheet */
/*@import "https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700";*/
article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}
audio,canvas,video{display:inline-block}
audio:not([controls]){display:none;height:0}
[hidden],template{display:none}
script{display:none!important}
html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}
body{margin:0}
a{background:transparent}
a:focus{outline:thin dotted}
a:active,a:hover{outline:0}
h1{font-size:2em;margin:.67em 0}
abbr[title]{border-bottom:1px dotted}
b,strong{font-weight:bold}
dfn{font-style:italic}
hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}
mark{background:#ff0;color:#000}
code,kbd,pre,samp{font-family:monospace;font-size:1em}
pre{white-space:pre-wrap}
q{quotes:"\201C" "\201D" "\2018" "\2019"}
small{font-size:80%}
sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}
sup{top:-.5em}
sub{bottom:-.25em}
img{border:0}
svg:not(:root){overflow:hidden}
figure{margin:0}
fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}
legend{border:0;padding:0}
button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}
button,input{line-height:normal}
button,select{text-transform:none}
button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}
button[disabled],html input[disabled]{cursor:default}
input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}
input[type="search"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}
input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}
button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}
textarea{overflow:auto;vertical-align:top}
table{border-collapse:collapse;border-spacing:0}
*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}
html,body{font-size:100%}
body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:"Noto Serif","DejaVu Serif",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto}
a:hover{cursor:pointer}
img,object,embed{max-width:100%;height:auto}
object,embed{height:100%}
img{-ms-interpolation-mode:bicubic}
.left{float:left!important}
.right{float:right!important}
.text-left{text-align:left!important}
.text-right{text-align:right!important}
.text-center{text-align:center!important}
.text-justify{text-align:justify!important}
.hide{display:none}
body{-webkit-font-smoothing:antialiased}
img,object,svg{display:inline-block;vertical-align:middle}
textarea{height:auto;min-height:50px}
select{width:100%}
.center{margin-left:auto;margin-right:auto}
.spread{width:100%}
p.lead,.paragraph.lead>p,#preamble>.sectionbody>.paragraph:first-of-type p{font-size:1.21875em;line-height:1.6}
.subheader,.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}
div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}
a{color:#2156a5;text-decoration:underline;line-height:inherit}
a:hover,a:focus{color:#1d4b8f}
a img{border:none}
p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}
p aside{font-size:.875em;line-height:1.35;font-style:italic}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{font-family:"Open Sans","DejaVu Sans",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}
h1 small,h2 small,h3 small,#toctitle small,.sidebarblock>.content>.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}
h1{font-size:2.125em}
h2{font-size:1.6875em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.375em}
h4,h5{font-size:1.125em}
h6{font-size:1em}
hr{border:solid #ddddd8;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}
em,i{font-style:italic;line-height:inherit}
strong,b{font-weight:bold;line-height:inherit}
small{font-size:60%;line-height:inherit}
code{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;font-weight:400;color:rgba(0,0,0,.9)}
ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}
ul,ol,ul.no-bullet,ol.no-bullet{margin-left:1.5em}
ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}
ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}
ul.square{list-style-type:square}
ul.circle{list-style-type:circle}
ul.disc{list-style-type:disc}
ul.no-bullet{list-style:none}
ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}
dl dt{margin-bottom:.3125em;font-weight:bold}
dl dd{margin-bottom:1.25em}
abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}
abbr{text-transform:none}
blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}
blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}
blockquote cite:before{content:"\2014 \0020"}
blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}
blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}
@media only screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2}
h1{font-size:2.75em}
h2{font-size:2.3125em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.6875em}
h4{font-size:1.4375em}}
table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}
table thead,table tfoot{background:#f7f8f7;font-weight:bold}
table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}
table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}
table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}
table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}
body{tab-size:4}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}
h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock>.content>.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}
.clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:" ";display:table}
.clearfix:after,.float-group:after{clear:both}
*:not(pre)>code{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}
pre,pre>code{line-height:1.45;color:rgba(0,0,0,.9);font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;font-weight:400;text-rendering:optimizeSpeed}
.keyseq{color:rgba(51,51,51,.8)}
kbd{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}
.keyseq kbd:first-child{margin-left:0}
.keyseq kbd:last-child{margin-right:0}
.menuseq,.menu{color:rgba(0,0,0,.8)}
b.button:before,b.button:after{position:relative;top:-1px;font-weight:400}
b.button:before{content:"[";padding:0 3px 0 2px}
b.button:after{content:"]";padding:0 2px 0 3px}
p a>code:hover{color:rgba(0,0,0,.9)}
#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}
#header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:" ";display:table}
#header:after,#content:after,#footnotes:after,#footer:after{clear:both}
#content{margin-top:1.25em}
#content:before{content:none}
#header>h1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}
#header>h1:first-child+#toc{margin-top:8px;border-top:1px solid #ddddd8}
#header>h1:only-child,body.toc2 #header>h1:nth-last-child(2){border-bottom:1px solid #ddddd8;padding-bottom:8px}
#header .details{border-bottom:1px solid #ddddd8;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}
#header .details span:first-child{margin-left:-.125em}
#header .details span.email a{color:rgba(0,0,0,.85)}
#header .details br{display:none}
#header .details br+span:before{content:"\00a0\2013\00a0"}
#header .details br+span.author:before{content:"\00a0\22c5\00a0";color:rgba(0,0,0,.85)}
#header .details br+span#revremark:before{content:"\00a0|\00a0"}
#header #revnumber{text-transform:capitalize}
#header #revnumber:after{content:"\00a0"}
#content>h1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #ddddd8;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}
#toc{border-bottom:1px solid #efefed;padding-bottom:.5em}
#toc>ul{margin-left:.125em}
#toc ul.sectlevel0>li>a{font-style:italic}
#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}
#toc ul{font-family:"Open Sans","DejaVu Sans",sans-serif;list-style-type:none}
#toc li{line-height:1.3334;margin-top:.3334em}
#toc a{text-decoration:none}
#toc a:active{text-decoration:underline}
#toctitle{color:#7a2518;font-size:1.2em}
@media only screen and (min-width:768px){#toctitle{font-size:1.375em}
body.toc2{padding-left:15em;padding-right:0}
#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #efefed;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}
#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}
#toc.toc2>ul{font-size:.9em;margin-bottom:0}
#toc.toc2 ul ul{margin-left:0;padding-left:1em}
#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}
body.toc2.toc-right{padding-left:0;padding-right:15em}
body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #efefed;left:auto;right:0}}
@media only screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}
#toc.toc2{width:20em}
#toc.toc2 #toctitle{font-size:1.375em}
#toc.toc2>ul{font-size:.95em}
#toc.toc2 ul ul{padding-left:1.25em}
body.toc2.toc-right{padding-left:0;padding-right:20em}}
#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}
#content #toc>:first-child{margin-top:0}
#content #toc>:last-child{margin-bottom:0}
#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}
#footer-text{color:rgba(255,255,255,.8);line-height:1.44}
.sect1{padding-bottom:.625em}
@media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}
.sect1+.sect1{border-top:1px solid #efefed}
#content h1>a.anchor,h2>a.anchor,h3>a.anchor,#toctitle>a.anchor,.sidebarblock>.content>.title>a.anchor,h4>a.anchor,h5>a.anchor,h6>a.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}
#content h1>a.anchor:before,h2>a.anchor:before,h3>a.anchor:before,#toctitle>a.anchor:before,.sidebarblock>.content>.title>a.anchor:before,h4>a.anchor:before,h5>a.anchor:before,h6>a.anchor:before{content:"\00A7";font-size:.85em;display:block;padding-top:.1em}
#content h1:hover>a.anchor,#content h1>a.anchor:hover,h2:hover>a.anchor,h2>a.anchor:hover,h3:hover>a.anchor,#toctitle:hover>a.anchor,.sidebarblock>.content>.title:hover>a.anchor,h3>a.anchor:hover,#toctitle>a.anchor:hover,.sidebarblock>.content>.title>a.anchor:hover,h4:hover>a.anchor,h4>a.anchor:hover,h5:hover>a.anchor,h5>a.anchor:hover,h6:hover>a.anchor,h6>a.anchor:hover{visibility:visible}
#content h1>a.link,h2>a.link,h3>a.link,#toctitle>a.link,.sidebarblock>.content>.title>a.link,h4>a.link,h5>a.link,h6>a.link{color:#ba3925;text-decoration:none}
#content h1>a.link:hover,h2>a.link:hover,h3>a.link:hover,#toctitle>a.link:hover,.sidebarblock>.content>.title>a.link:hover,h4>a.link:hover,h5>a.link:hover,h6>a.link:hover{color:#a53221}
.audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}
.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{text-rendering:optimizeLegibility;text-align:left;font-family:"Noto Serif","DejaVu Serif",serif;font-size:1rem;font-style:italic}
table.tableblock>caption.title{white-space:nowrap;overflow:visible;max-width:0}
.paragraph.lead>p,#preamble>.sectionbody>.paragraph:first-of-type p{color:rgba(0,0,0,.85)}
table.tableblock #preamble>.sectionbody>.paragraph:first-of-type p{font-size:inherit}
.admonitionblock>table{border-collapse:separate;border:0;background:none;width:100%}
.admonitionblock>table td.icon{text-align:center;width:80px}
.admonitionblock>table td.icon img{max-width:none}
.admonitionblock>table td.icon .title{font-weight:bold;font-family:"Open Sans","DejaVu Sans",sans-serif;text-transform:uppercase}
.admonitionblock>table td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)}
.admonitionblock>table td.content>:last-child>:last-child{margin-bottom:0}
.exampleblock>.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}
.exampleblock>.content>:first-child{margin-top:0}
.exampleblock>.content>:last-child{margin-bottom:0}
.sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}
.sidebarblock>:first-child{margin-top:0}
.sidebarblock>:last-child{margin-bottom:0}
.sidebarblock>.content>.title{color:#7a2518;margin-top:0;text-align:center}
.exampleblock>.content>:last-child>:last-child,.exampleblock>.content .olist>ol>li:last-child>:last-child,.exampleblock>.content .ulist>ul>li:last-child>:last-child,.exampleblock>.content .qlist>ol>li:last-child>:last-child,.sidebarblock>.content>:last-child>:last-child,.sidebarblock>.content .olist>ol>li:last-child>:last-child,.sidebarblock>.content .ulist>ul>li:last-child>:last-child,.sidebarblock>.content .qlist>ol>li:last-child>:last-child{margin-bottom:0}
.literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class="highlight"],.listingblock pre[class^="highlight "],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}
.sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class="highlight"],.sidebarblock .listingblock pre[class^="highlight "],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}
.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;padding:1em;font-size:.8125em}
.literalblock pre.nowrap,.literalblock pre[class].nowrap,.listingblock pre.nowrap,.listingblock pre[class].nowrap{overflow-x:auto;white-space:pre;word-wrap:normal}
@media only screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}
@media only screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}
.literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}
.listingblock pre.highlightjs{padding:0}
.listingblock pre.highlightjs>code{padding:1em;-webkit-border-radius:4px;border-radius:4px}
.listingblock pre.prettyprint{border-width:0}
.listingblock>.content{position:relative}
.listingblock code[data-lang]:before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}
.listingblock:hover code[data-lang]:before{display:block}
.listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:.5em;color:#999}
.listingblock.terminal pre .command:not([data-prompt]):before{content:"$"}
table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}
table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}
table.pyhltable td.code{padding-left:.75em;padding-right:0}
pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #ddddd8}
pre.pygments .lineno{display:inline-block;margin-right:.25em}
table.pyhltable .linenodiv{background:none!important;padding-right:0!important}
.quoteblock{margin:0 1em 1.25em 1.5em;display:table}
.quoteblock>.title{margin-left:-1.5em;margin-bottom:.75em}
.quoteblock blockquote,.quoteblock blockquote p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}
.quoteblock blockquote{margin:0;padding:0;border:0}
.quoteblock blockquote:before{content:"\201c";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}
.quoteblock blockquote>.paragraph:last-child p{margin-bottom:0}
.quoteblock .attribution{margin-top:.5em;margin-right:.5ex;text-align:right}
.quoteblock .quoteblock{margin-left:0;margin-right:0;padding:.5em 0;border-left:3px solid rgba(0,0,0,.6)}
.quoteblock .quoteblock blockquote{padding:0 0 0 .75em}
.quoteblock .quoteblock blockquote:before{display:none}
.verseblock{margin:0 1em 1.25em 1em}
.verseblock pre{font-family:"Open Sans","DejaVu Sans",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}
.verseblock pre strong{font-weight:400}
.verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}
.quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}
.quoteblock .attribution br,.verseblock .attribution br{display:none}
.quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}
.quoteblock.abstract{margin:0 0 1.25em 0;display:block}
.quoteblock.abstract blockquote,.quoteblock.abstract blockquote p{text-align:left;word-spacing:0}
.quoteblock.abstract blockquote:before,.quoteblock.abstract blockquote p:first-of-type:before{display:none}
table.tableblock{max-width:100%;border-collapse:separate}
table.tableblock td>.paragraph:last-child p>p:last-child,table.tableblock th>p:last-child,table.tableblock td>p:last-child{margin-bottom:0}
table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}
table.grid-all th.tableblock,table.grid-all td.tableblock{border-width:0 1px 1px 0}
table.grid-all tfoot>tr>th.tableblock,table.grid-all tfoot>tr>td.tableblock{border-width:1px 1px 0 0}
table.grid-cols th.tableblock,table.grid-cols td.tableblock{border-width:0 1px 0 0}
table.grid-all *>tr>.tableblock:last-child,table.grid-cols *>tr>.tableblock:last-child{border-right-width:0}
table.grid-rows th.tableblock,table.grid-rows td.tableblock{border-width:0 0 1px 0}
table.grid-all tbody>tr:last-child>th.tableblock,table.grid-all tbody>tr:last-child>td.tableblock,table.grid-all thead:last-child>tr>th.tableblock,table.grid-rows tbody>tr:last-child>th.tableblock,table.grid-rows tbody>tr:last-child>td.tableblock,table.grid-rows thead:last-child>tr>th.tableblock{border-bottom-width:0}
table.grid-rows tfoot>tr>th.tableblock,table.grid-rows tfoot>tr>td.tableblock{border-width:1px 0 0 0}
table.frame-all{border-width:1px}
table.frame-sides{border-width:0 1px}
table.frame-topbot{border-width:1px 0}
th.halign-left,td.halign-left{text-align:left}
th.halign-right,td.halign-right{text-align:right}
th.halign-center,td.halign-center{text-align:center}
th.valign-top,td.valign-top{vertical-align:top}
th.valign-bottom,td.valign-bottom{vertical-align:bottom}
th.valign-middle,td.valign-middle{vertical-align:middle}
table thead th,table tfoot th{font-weight:bold}
tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}
tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}
p.tableblock>code:only-child{background:none;padding:0}
p.tableblock{font-size:1em}
td>div.verse{white-space:pre}
ol{margin-left:1.75em}
ul li ol{margin-left:1.5em}
dl dd{margin-left:1.125em}
dl dd:last-child,dl dd:last-child>:last-child{margin-bottom:0}
ol>li p,ul>li p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}
ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none}
ul.unstyled,ol.unnumbered,ul.checklist{margin-left:.625em}
ul.checklist li>p:first-child>.fa-square-o:first-child,ul.checklist li>p:first-child>.fa-check-square-o:first-child{width:1em;font-size:.85em}
ul.checklist li>p:first-child>input[type="checkbox"]:first-child{width:1em;position:relative;top:1px}
ul.inline{margin:0 auto .625em auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overflow:hidden}
ul.inline>li{list-style:none;float:left;margin-left:1.375em;display:block}
ul.inline>li>*{display:block}
.unstyled dl dt{font-weight:400;font-style:normal}
ol.arabic{list-style-type:decimal}
ol.decimal{list-style-type:decimal-leading-zero}
ol.loweralpha{list-style-type:lower-alpha}
ol.upperalpha{list-style-type:upper-alpha}
ol.lowerroman{list-style-type:lower-roman}
ol.upperroman{list-style-type:upper-roman}
ol.lowergreek{list-style-type:lower-greek}
.hdlist>table,.colist>table{border:0;background:none}
.hdlist>table>tbody>tr,.colist>table>tbody>tr{background:none}
td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}
td.hdlist1{font-weight:bold;padding-bottom:1.25em}
.literalblock+.colist,.listingblock+.colist{margin-top:-.5em}
.colist>table tr>td:first-of-type{padding:0 .75em;line-height:1}
.colist>table tr>td:last-of-type{padding:.25em 0}
.thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}
.imageblock.left,.imageblock[style*="float: left"]{margin:.25em .625em 1.25em 0}
.imageblock.right,.imageblock[style*="float: right"]{margin:.25em 0 1.25em .625em}
.imageblock>.title{margin-bottom:0}
.imageblock.thumb,.imageblock.th{border-width:6px}
.imageblock.thumb>.title,.imageblock.th>.title{padding:0 .125em}
.image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}
.image.left{margin-right:.625em}
.image.right{margin-left:.625em}
a.image{text-decoration:none;display:inline-block}
a.image object{pointer-events:none}
sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}
sup.footnote a,sup.footnoteref a{text-decoration:none}
sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}
#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}
#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em 0;border-width:1px 0 0 0}
#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;text-indent:-1.05em;margin-bottom:.2em}
#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none}
#footnotes .footnote:last-of-type{margin-bottom:0}
#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}
.gist .file-data>table{border:0;background:#fff;width:100%;margin-bottom:0}
.gist .file-data>table td.line-data{width:99%}
div.unbreakable{page-break-inside:avoid}
.big{font-size:larger}
.small{font-size:smaller}
.underline{text-decoration:underline}
.overline{text-decoration:overline}
.line-through{text-decoration:line-through}
.aqua{color:#00bfbf}
.aqua-background{background-color:#00fafa}
.black{color:#000}
.black-background{background-color:#000}
.blue{color:#0000bf}
.blue-background{background-color:#0000fa}
.fuchsia{color:#bf00bf}
.fuchsia-background{background-color:#fa00fa}
.gray{color:#606060}
.gray-background{background-color:#7d7d7d}
.green{color:#006000}
.green-background{background-color:#007d00}
.lime{color:#00bf00}
.lime-background{background-color:#00fa00}
.maroon{color:#600000}
.maroon-background{background-color:#7d0000}
.navy{color:#000060}
.navy-background{background-color:#00007d}
.olive{color:#606000}
.olive-background{background-color:#7d7d00}
.purple{color:#600060}
.purple-background{background-color:#7d007d}
.red{color:#bf0000}
.red-background{background-color:#fa0000}
.silver{color:#909090}
.silver-background{background-color:#bcbcbc}
.teal{color:#006060}
.teal-background{background-color:#007d7d}
.white{color:#bfbfbf}
.white-background{background-color:#fafafa}
.yellow{color:#bfbf00}
.yellow-background{background-color:#fafa00}
span.icon>.fa{cursor:default}
.admonitionblock td.icon [class^="fa icon-"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}
.admonitionblock td.icon .icon-note:before{content:"\f05a";color:#19407c}
.admonitionblock td.icon .icon-tip:before{content:"\f0eb";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}
.admonitionblock td.icon .icon-warning:before{content:"\f071";color:#bf6900}
.admonitionblock td.icon .icon-caution:before{content:"\f06d";color:#bf3400}
.admonitionblock td.icon .icon-important:before{content:"\f06a";color:#bf0000}
.conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:"Open Sans","DejaVu Sans",sans-serif;font-style:normal;font-weight:bold}
.conum[data-value] *{color:#fff!important}
.conum[data-value]+b{display:none}
.conum[data-value]:after{content:attr(data-value)}
pre .conum[data-value]{position:relative;top:-.125em}
b.conum *{color:inherit!important}
.conum:not([data-value]):empty{display:none}
dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}
h1,h2,p,td.content,span.alt{letter-spacing:-.01em}
p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}
p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}
p{margin-bottom:1.25rem}
.sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}
.exampleblock>.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}
.print-only{display:none!important}
@media print{@page{margin:1.25cm .75cm}
*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}
a{color:inherit!important;text-decoration:underline!important}
a.bare,a[href^="#"],a[href^="mailto:"]{text-decoration:none!important}
a[href^="http:"]:not(.bare):after,a[href^="https:"]:not(.bare):after{content:"(" attr(href) ")";display:inline-block;font-size:.875em;padding-left:.25em}
abbr[title]:after{content:" (" attr(title) ")"}
pre,blockquote,tr,img,object,svg{page-break-inside:avoid}
thead{display:table-header-group}
svg{max-width:100%}
p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}
h2,h3,#toctitle,.sidebarblock>.content>.title{page-break-after:avoid}
#toc,.sidebarblock,.exampleblock>.content{background:none!important}
#toc{border-bottom:1px solid #ddddd8!important;padding-bottom:0!important}
.sect1{padding-bottom:0!important}
.sect1+.sect1{border:0!important}
#header>h1:first-child{margin-top:1.25rem}
body.book #header{text-align:center}
body.book #header>h1:first-child{border:0!important;margin:2.5em 0 1em 0}
body.book #header .details{border:0!important;display:block;padding:0!important}
body.book #header .details span:first-child{margin-left:0!important}
body.book #header .details br{display:block}
body.book #header .details br+span:before{content:none!important}
body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}
body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1>h2{page-break-before:always}
.listingblock code[data-lang]:before{display:block}
#footer{background:none!important;padding:0 .9375em}
#footer-text{color:rgba(0,0,0,.6)!important;font-size:.9em}
.hide-on-print{display:none!important}
.print-only{display:block!important}
.hide-for-print{display:none!important}
.show-for-print{display:inherit!important}}</style>
<style>.listingblock .pygments .hll { background-color: #ffffcc }
.listingblock .pygments  { background: #f8f8f8; }
.listingblock .pygments .tok-c { color: #408080; font-style: italic } /* Comment */
.listingblock .pygments .tok-err { border: 1px solid #FF0000 } /* Error */
.listingblock .pygments .tok-k { color: #008000; font-weight: bold } /* Keyword */
.listingblock .pygments .tok-o { color: #666666 } /* Operator */
.listingblock .pygments .tok-cm { color: #408080; font-style: italic } /* Comment.Multiline */
.listingblock .pygments .tok-cp { color: #BC7A00 } /* Comment.Preproc */
.listingblock .pygments .tok-c1 { color: #408080; font-style: italic } /* Comment.Single */
.listingblock .pygments .tok-cs { color: #408080; font-style: italic } /* Comment.Special */
.listingblock .pygments .tok-gd { color: #A00000 } /* Generic.Deleted */
.listingblock .pygments .tok-ge { font-style: italic } /* Generic.Emph */
.listingblock .pygments .tok-gr { color: #FF0000 } /* Generic.Error */
.listingblock .pygments .tok-gh { color: #000080; font-weight: bold } /* Generic.Heading */
.listingblock .pygments .tok-gi { color: #00A000 } /* Generic.Inserted */
.listingblock .pygments .tok-go { color: #888888 } /* Generic.Output */
.listingblock .pygments .tok-gp { color: #000080; font-weight: bold } /* Generic.Prompt */
.listingblock .pygments .tok-gs { font-weight: bold } /* Generic.Strong */
.listingblock .pygments .tok-gu { color: #800080; font-weight: bold } /* Generic.Subheading */
.listingblock .pygments .tok-gt { color: #0044DD } /* Generic.Traceback */
.listingblock .pygments .tok-kc { color: #008000; font-weight: bold } /* Keyword.Constant */
.listingblock .pygments .tok-kd { color: #008000; font-weight: bold } /* Keyword.Declaration */
.listingblock .pygments .tok-kn { color: #008000; font-weight: bold } /* Keyword.Namespace */
.listingblock .pygments .tok-kp { color: #008000 } /* Keyword.Pseudo */
.listingblock .pygments .tok-kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
.listingblock .pygments .tok-kt { color: #B00040 } /* Keyword.Type */
.listingblock .pygments .tok-m { color: #666666 } /* Literal.Number */
.listingblock .pygments .tok-s { color: #BA2121 } /* Literal.String */
.listingblock .pygments .tok-na { color: #7D9029 } /* Name.Attribute */
.listingblock .pygments .tok-nb { color: #008000 } /* Name.Builtin */
.listingblock .pygments .tok-nc { color: #0000FF; font-weight: bold } /* Name.Class */
.listingblock .pygments .tok-no { color: #880000 } /* Name.Constant */
.listingblock .pygments .tok-nd { color: #AA22FF } /* Name.Decorator */
.listingblock .pygments .tok-ni { color: #999999; font-weight: bold } /* Name.Entity */
.listingblock .pygments .tok-ne { color: #D2413A; font-weight: bold } /* Name.Exception */
.listingblock .pygments .tok-nf { color: #0000FF } /* Name.Function */
.listingblock .pygments .tok-nl { color: #A0A000 } /* Name.Label */
.listingblock .pygments .tok-nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
.listingblock .pygments .tok-nt { color: #008000; font-weight: bold } /* Name.Tag */
.listingblock .pygments .tok-nv { color: #19177C } /* Name.Variable */
.listingblock .pygments .tok-ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
.listingblock .pygments .tok-w { color: #bbbbbb } /* Text.Whitespace */
.listingblock .pygments .tok-mb { color: #666666 } /* Literal.Number.Bin */
.listingblock .pygments .tok-mf { color: #666666 } /* Literal.Number.Float */
.listingblock .pygments .tok-mh { color: #666666 } /* Literal.Number.Hex */
.listingblock .pygments .tok-mi { color: #666666 } /* Literal.Number.Integer */
.listingblock .pygments .tok-mo { color: #666666 } /* Literal.Number.Oct */
.listingblock .pygments .tok-sb { color: #BA2121 } /* Literal.String.Backtick */
.listingblock .pygments .tok-sc { color: #BA2121 } /* Literal.String.Char */
.listingblock .pygments .tok-sd { color: #BA2121; font-style: italic } /* Literal.String.Doc */
.listingblock .pygments .tok-s2 { color: #BA2121 } /* Literal.String.Double */
.listingblock .pygments .tok-se { color: #BB6622; font-weight: bold } /* Literal.String.Escape */
.listingblock .pygments .tok-sh { color: #BA2121 } /* Literal.String.Heredoc */
.listingblock .pygments .tok-si { color: #BB6688; font-weight: bold } /* Literal.String.Interpol */
.listingblock .pygments .tok-sx { color: #008000 } /* Literal.String.Other */
.listingblock .pygments .tok-sr { color: #BB6688 } /* Literal.String.Regex */
.listingblock .pygments .tok-s1 { color: #BA2121 } /* Literal.String.Single */
.listingblock .pygments .tok-ss { color: #19177C } /* Literal.String.Symbol */
.listingblock .pygments .tok-bp { color: #008000 } /* Name.Builtin.Pseudo */
.listingblock .pygments .tok-vc { color: #19177C } /* Name.Variable.Class */
.listingblock .pygments .tok-vg { color: #19177C } /* Name.Variable.Global */
.listingblock .pygments .tok-vi { color: #19177C } /* Name.Variable.Instance */
.listingblock .pygments .tok-il { color: #666666 } /* Literal.Number.Integer.Long */</style></head><body class="article"><div id="header"><h1>LÖVE for Newbies</h1><div class="details"><span class="author" id="author">Sol Bekic</span><br /><span class="email" id="email"><a href="mailto:s0lll0s@blinkenshell.org">s0lll0s@blinkenshell.org</a></span><br /><span class="author" id="author2">Ricardo Gomes</span><br /><span class="email" id="email2"><a href="mailto:desk467@gmail.com">desk467@gmail.com</a></span></div><div id="toc" class="toc"><div id="toctitle">Table of Contents</div><ul class="sectlevel1"><li><a href="#_preface">Preface</a></li><li><a href="#world1">World 1: The Prototype</a><ul class="sectlevel2"><li><a href="#world1-1">World 1-1: The Concept</a></li><li><a href="#world1-2">World 1-2: The Tools</a></li><li><a href="#world1-3">World 1-3: Starting Small</a></li><li><a href="#world1-4">World 1-4: Creating Motion</a></li><li><a href="#world1-5">World 1-5: Better Steering</a></li></ul></li><li><a href="#world2">World 2: The Redo</a></li><li><a href="#world3">World 3: The Cookbook</a><ul class="sectlevel2"><li><a href="#world3-">World 3-1: Object Pools</a></li></ul></li><li><a href="#_license">License</a><ul class="sectlevel2"><li><a href="#_libraries_tools">Libraries &amp; Tools</a></li></ul></li></ul></div></div><div id="content"><div class="sect1"><h2 id="_preface">Preface</h2><div class="sectionbody"><div class="quoteblock"><blockquote>So you want to make a game?</blockquote><div class="attribution"><cite>The mandatory Book Opening sentence</cite></div></div>
<div style="page-break-after: always;"></div></div></div>
<div class="sect2"><h3 id="world1">World 1: The Prototype</h3><div class="paragraph"><p>Welcome to World 1!<br />
Here we will build a prototype for a game, up from the ground. Let&#8217;s jump right in!</p></div>
<div style="page-break-after: always;"></div>
<div class="sect2"><h3 id="world1-1">World 1-1: The Concept</h3><div class="paragraph"><p>For the Purposes of this Book, we have decided to recreate the game <a href="http://www.freeasteroids.org/">Asteroids</a>.</p></div>
<div class="paragraph"><p>Before we start we need to think about how exactly this game works and what we want to include.
Thinking about the game before we start will keep us from getting lost in the
development process or adding feature after feature and losing interest before it is done.</p></div>
<div class="paragraph"><p>So, how does Asteroids work?</p></div>
<div class="paragraph"><p>In asteroids, the Player controls a small spaceship that is flying around.
He has to shoot asteroids that fly around the screen.
If he gets hit by an asteroid, the player loses a life and has to restart the round.
When he hits an asteroid, the asteroid splits into two smaller ones.</p></div>
<div class="paragraph"><p>Alright, from these few rules we can already extract some things that we will need:</p></div>
<div class="ulist"><ul><li><p>a Spaceship / Player</p></li><li><p>Asteroids</p></li><li><p>Bullets</p></li></ul></div>
<div class="paragraph"><p>Next, let&#8217;s see what each of these do or can do:</p></div>
<div class="sect3"><h4 id="world1-1-spaceship">The Spaceship</h4><div class="paragraph"><p>The spaceship is the main thing the player can control in our game.
The player can use two keys to accelerate or decelerate in the direction the ship
is currently facing. He can also turn the spaceship with two other keys.
Lastly the player can press a button to fire a shot.</p></div>
<div class="paragraph"><p>When the spaceships leaves the screen on one side, it will enter from the opposite side,
keeping it&#8217;s velocity.</p></div>
<div class="paragraph"><p>We can see that the spaceship needs to have a <code>position</code>, <code>velocity</code> and <code>rotation</code>.
In <a href="#world1-5">World 1-5</a> we will see that the actual way of saving the information
we use differs, but we could as well do with this "definition".</p></div></div>
<div class="sect3"><h4 id="_the_asteroids">The Asteroids</h4><div class="paragraph"><p>Asteroids move in a straight line, also wrapping around the Screen in the same way
the spaceship does.
They larger an asteroid is, the slower it should move.
Therefore all we need to know about every asteroid is his <code>position</code>, <code>size</code> and his <code>rotation</code>.</p></div>
<div class="paragraph"><p>Whenever an asteroid is hit, we split it into two smaller ones, unless it is already
the smallest possible size. In that case we remove it altogether.</p></div></div>
<div class="sect3"><h4 id="_the_bullets">The Bullets</h4><div class="paragraph"><p>Bullets travel along a straight path, much like asteroids.
However they are removed from the game as soon as they hit an asteroid or leave the screen.</p></div>
<div class="paragraph"><p>All bullets share the same speed, we only need to know the bullet&#8217;s <code>position</code> and <code>rotation</code>.
&lt;&lt;&lt;</p></div></div></div>
<div class="sect2"><h3 id="world1-2">World 1-2: The Tools</h3><div class="sect3"><h4 id="_lÖve">LÖVE</h4><div class="paragraph"><p>So, what makes a LÖVE Project?<br />
At core a LÖVE Project is just a folder containing everything needed to make the game;
Code, Images, Sound and Video files and everything else you might need.</p></div>
<div class="sect4"><h5 id="_code">Code</h5><div class="paragraph"><p>Obviously, a game contains code.
LÖVE Games are programmed in Lua, which you should be familiar with already.
Generally Lua Source Files (<code>.lua</code>) can lay around anywhere in the project
directory and have arbitrary names&#8230;&#8203; except for two special ones: <code>main.lua</code> and <code>conf.lua</code>.</p></div>
<div class="paragraph"><p>These two are the only files that the LÖVE Framework runs; they are the starting
points of every game or project you build.</p></div></div>
<div class="sect4"><h5 id="_main_lua">main.lua</h5><div class="paragraph"><p>As the name implies this file will contain all your <strong>main code</strong> - what exactly
that will be and how you organize your code is up to you.
Usually this file contains the used <em>Callback Routines</em>, which will be covered in <a href="#world1-3">the next Level</a>.
For smaller projects and the next levels in this book this will be the only file
(except for <code>conf.lua</code>) you will need.</p></div></div>
<div class="sect4"><h5 id="_conf_lua">conf.lua</h5><div class="paragraph"><p><em>conf</em> is short for <strong>Conf</strong>iguration, and thats what <code>conf.lua</code> is all about.
You can fill this file with a function called <a href="https://love2d.org/wiki/love.conf"><code>love.conf( t )</code></a>
that accepts a table as it&#8217;s only parameter.
In that function you can then modify certain fields of the table and thereby
change the configuration the LÖVE Framework uses when it first creates your window.</p></div>
<div class="paragraph"><p>Here is a function that sets every possible value to it&#8217;s default value - and thereby does nothing:</p></div>
<div class="listingblock"><div class="title">Full <code>conf.lua</code> example</div>
<div class="content"><pre class="pygments highlight"><code data-lang="lua">function love.conf(t)
    t.identity = nil                   -- The name of the save directory (string)
    t.version = "0.9.1"                -- The LÖVE version this game was made for (string)
    t.console = false                  -- Attach a console (boolean, Windows only)

    t.window.title = "Untitled"        -- The window title (string)
    t.window.icon = nil                -- Filepath to an image to use as the window's icon (string)
    t.window.width = 800               -- The window width (number)
    t.window.height = 600              -- The window height (number)
    t.window.borderless = false        -- Remove all border visuals from the window (boolean)
    t.window.resizable = false         -- Let the window be user-resizable (boolean)
    t.window.minwidth = 1              -- Minimum window width if the window is resizable (number)
    t.window.minheight = 1             -- Minimum window height if the window is resizable (number)
    t.window.fullscreen = false        -- Enable fullscreen (boolean)
    t.window.fullscreentype = "normal" -- Standard fullscreen or desktop fullscreen mode (string)
    t.window.vsync = true              -- Enable vertical sync (boolean)
    t.window.fsaa = 0                  -- The number of samples to use with multi-sampled antialiasing (number)
    t.window.display = 1               -- Index of the monitor to show the window in (number)
    t.window.highdpi = false           -- Enable high-dpi mode for the window on a Retina display (boolean). Added in 0.9.1
    t.window.srgb = false              -- Enable sRGB gamma correction when drawing to the screen (boolean). Added in 0.9.1

    t.modules.audio = true             -- Enable the audio module (boolean)
    t.modules.event = true             -- Enable the event module (boolean)
    t.modules.graphics = true          -- Enable the graphics module (boolean)
    t.modules.image = true             -- Enable the image module (boolean)
    t.modules.joystick = true          -- Enable the joystick module (boolean)
    t.modules.keyboard = true          -- Enable the keyboard module (boolean)
    t.modules.math = true              -- Enable the math module (boolean)
    t.modules.mouse = true             -- Enable the mouse module (boolean)
    t.modules.physics = true           -- Enable the physics module (boolean)
    t.modules.sound = true             -- Enable the sound module (boolean)
    t.modules.system = true            -- Enable the system module (boolean)
    t.modules.timer = true             -- Enable the timer module (boolean)
    t.modules.window = true            -- Enable the window module (boolean)
    t.modules.thread = true            -- Enable the thread module (boolean)
end</code></pre></div></div>
<div class="admonitionblock note"><table><tr><td class="icon"><div class="title">Note</div></td><td class="content">You don&#8217;t need to use a <code>conf.lua</code> or specify every key in the conf table;
everything you leave out will remain at it&#8217;s default value.</td></tr></table></div>
<div class="paragraph"><p>You will mostly be using this to set a different resolution for your game and set the game title.</p></div>
<div class="listingblock"><div class="title">Usual <code>conf.lua</code></div>
<div class="content"><pre class="pygments highlight"><code data-lang="lua">function love.conf( t )
    t.identity      = "GtGLG"
    t.version       = "0.9.1"

    t.window.title  = "Gary, the green-legged Giraffe"
    t.window.width  = 1200
    t.window.height = 720

    t.window.fsaa   = 4
    t.window.vsync  = true
end</code></pre></div></div></div>
<div class="sect4"><h5 id="_other_files">Other files</h5><div class="paragraph"><p>Everything else will need to be <code>require</code>d by <code>main.lua</code> in some way (direct or indirect).</p></div></div>
<div class="sect4"><h5 id="_images_animations_sounds_and_other_assets">Images, Animations, Sounds and other Assets</h5><div class="paragraph"><p>All of these files need to be somewhere in the project directory aswell.
You will learn to load and draw or play these files throughout this World.</p></div>
<div class="paragraph"><p>Even though you can just have all the files in one directory, it is advised that
you structure your files in a logical hierarchy, for example like this:</p></div>
<div class="literalblock"><div class="content"><pre>- mygame/
    + main.lua
    + conf.lua
    + lib/
        + library1.lua
        + library2.lua
        + sometool.lua
    + assets/
        + images/
            + player.png
            + rock.png
        + sounds/
            + impact.wav
            + menumusic.mp3
        + videos/
            + intro.mp4</pre></div></div>
<div style="page-break-after: always;"></div></div></div></div>
<div class="sect2"><h3 id="world1-3">World 1-3: Starting Small</h3><div class="paragraph"><p>Alright, now that we now the file structure, we can get started on the actual code.</p></div>
<div class="sect3"><h4 id="_drawing_circles">Drawing Circles</h4><div class="paragraph"><p>In the <a href="#world1-2">last Level</a> we learned that our main code goes in a file called
<code>main.lua</code> and that we are supposed to define <em>Callback Routines</em> there.</p></div>
<div class="paragraph"><p>A <em>Callback Routine</em> is nothing but a function with a specific name the LÖVE framework knows.
For example, whenever a key is pressed, LÖVE will attempt to call a function called <a href="https://love2d.org/wiki/love.keypressed"><code>love.keypressed</code></a>.
If you have not written than function (yet), the keypress will be ignored, but
if you choose to write one, you can do something in reaction to that <em>Event</em>.</p></div>
<div class="paragraph"><p>One of the most important Callbacks is <a href="https://love2d.org/wiki/love.draw"><code>love.draw</code></a>.
As the name implies, this is where any drawing to the screen should take place.</p></div>
<div class="listingblock"><div class="title">main.lua</div>
<div class="content"><pre class="pygments highlight"><code data-lang="lua">function love.draw()
  -- draw a sparkling unicorn
end</code></pre></div></div>
<div class="paragraph"><p>Inside this function we can now draw everything we want the player to be able to see.
To get started, let&#8217;s draw a circle.
To draw a circle, we will use the function <a href="https://love2d.org/wiki/love.graphics.circle"><code>love.graphics.circle</code></a>.
Go and see what you can find on the wiki page now!</p></div>
<div class="admonitionblock note"><table><tr><td class="icon"><div class="title">Note</div></td><td class="content"><div class="paragraph"><p><a href="https://love2d.org/wiki/love">The wiki</a> is <strong>the</strong> most important resource for programming in LÖVE.
You can find information and examples for all available functions there.</p></div>
<div class="paragraph"><p>When you get stuck somewhere, first consult the wiki.
If you cannot find a solution there, <strong>search the forum</strong>. If you <em>still</em> do not find anything,
start a new thread in the <strong>Support &amp; Development</strong> forum.
Provide a clear, concise title and <em>be patient!</em></p></div></td></tr></table></div>
<div class="paragraph"><p>As you can see, <a href="https://love2d.org/wiki/love.graphics.circle"><code>love.graphics.circle</code></a> accepts five parameters:</p></div>
<div class="ulist"><ul><li><p>mode, whether to <em>fill</em> or <em>stroke</em> the circle (<code>"line"</code> is used to stroke)</p></li><li><p>x, the horizontal position of the circle&#8217;s center</p></li><li><p>y, the vertical position</p></li><li><p>radius, the circle&#8217;s radius (half of the width)</p></li><li><p>segments, how detailed to draw the circle. This can be left out.</p></li></ul></div>
<div class="paragraph"><p>So, to draw a filled 30px circle at (100, 100) and then a stroked one 20px further down,
this is what we need to do:</p></div>
<div class="listingblock"><div class="title">main.lua</div>
<div class="content"><pre class="pygments highlight"><code data-lang="lua">function love.draw()
  love.graphics.circle("fill", 100, 100, 15)
  love.graphics.circle("line", 100, 120, 15)
end</code></pre></div></div>
<div class="livecode">
        <canvas id="1-3-circles-canvas" data-module="1-3-circles"></canvas>
        <script>(function () {
    var canvas = document.getElementById('1-3-circles-canvas');
    var Module = {
        arguments: ['./'],
        printErr: console.error.bind(console),
        setStatus: function (e) {
            if (!e && Module.didSyncFS && Module.remainingDependencies === 0)
                Module.callMain(Module.arguments);
        },
        canvas: canvas,
        didSyncFS: false,
        totalDependencies: 0,
        remainingDependencies: 0,
        expectedDataFileDownloads: 1,
        finishedDataFileDownloads: 0,
        monitorRunDependencies: function(left) {
          this.remainingDependencies = left;
          this.totalDependencies = Math.max(this.totalDependencies, left);
        },
        preRun: [function(){ Module.ENV.SDL_EMSCRIPTEN_KEYBOARD_ELEMENT = "#canvas"; }]
    };
    canvas.module = Module;

    function runWithFS () {
      var fileData1 = [];
fileData1.push.apply(fileData1, [102, 117, 110, 99, 116, 105, 111, 110, 32, 108, 111, 118, 101, 46, 100, 114, 97, 119, 40, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 99, 105, 114, 99, 108, 101, 40, 34, 102, 105, 108, 108, 34, 44, 32, 49, 48, 48, 44, 32, 49, 48, 48, 44, 32, 49, 53, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 99, 105, 114, 99, 108, 101, 40, 34, 108, 105, 110, 101, 34, 44, 32, 49, 48, 48, 44, 32, 49, 50, 48, 44, 32, 49, 53, 41, 10, 101, 110, 100]);
Module['FS_createDataFile']('.', 'main.lua', fileData1, true, true);
    }

    if (Module['calledRun']) {
      runWithFS();
    } else {
      if (!Module['preRun']) Module['preRun'] = [];
      Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
    }

    window.mod = Module;
})();
</script>
      </div>
<div class="paragraph"><p>Quite similarly, we can also draw rectangles using <a href="https://love2d.org/wiki/love.graphics.rectangle"><code>love.graphics.rectangle</code></a>.
The six parameters are:</p></div>
<div class="ulist"><ul><li><p>mode, same as for <code>circle</code></p></li><li><p>x, this time it is not the center position of the top-left corner</p></li><li><p>y, again, relative to the top left corner</p></li><li><p>width, the width of the rectangle being drawn</p></li><li><p>height, the height of the rectangle</p></li></ul></div>
<div class="paragraph"><p>Another function you will use in probably every game is <a href="https://love2d.org/wiki/love.graphics.setColor"><code>love.graphics.setColor</code></a>.
It accepts three numbers in the range of <code>0</code> to <code>255</code>, specifying the intensity
of red, green and blue respectively.
A fourth value, used as alpha (transparency) can optionally be supplied.</p></div>
<div class="paragraph"><p>The last drawing function for now is <a href="https://love2d.org/wiki/love.graphics.line"><code>love.graphics.line</code></a>.
You can pass it four values, each representing the x and y values of a point.</p></div>
<div class="paragraph"><p>Putting it all together, we can draw a little stickman:</p></div>
<div class="openblock"><div class="content"><div class="listingblock"><div class="title">main.lua</div>
<div class="content"><pre class="pygments highlight"><code data-lang="lua"><span class="tok-k">function</span> <span class="tok-nc">love</span><span class="tok-p">.</span><span class="tok-nf">draw</span><span class="tok-p">()</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">setColor</span><span class="tok-p">(</span><span class="tok-mi">255</span><span class="tok-p">,</span> <span class="tok-mi">255</span><span class="tok-p">,</span> <span class="tok-mi">255</span><span class="tok-p">)</span>           <span class="tok-c1">-- white</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">line</span><span class="tok-p">(</span><span class="tok-mi">40</span><span class="tok-p">,</span> <span class="tok-mi">90</span><span class="tok-p">,</span> <span class="tok-mi">35</span><span class="tok-p">,</span> <span class="tok-mi">120</span><span class="tok-p">)</span>             <span class="tok-c1">-- left foot</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">line</span><span class="tok-p">(</span><span class="tok-mi">60</span><span class="tok-p">,</span> <span class="tok-mi">90</span><span class="tok-p">,</span> <span class="tok-mi">65</span><span class="tok-p">,</span> <span class="tok-mi">120</span><span class="tok-p">)</span>             <span class="tok-c1">-- right foot</span>

  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">setColor</span><span class="tok-p">(</span><span class="tok-mi">0</span><span class="tok-p">,</span> <span class="tok-mi">255</span><span class="tok-p">,</span> <span class="tok-mi">0</span><span class="tok-p">)</span>               <span class="tok-c1">-- green</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">rectangle</span><span class="tok-p">(</span><span class="tok-s2">&quot;</span><span class="tok-s">fill&quot;</span><span class="tok-p">,</span> <span class="tok-mi">30</span><span class="tok-p">,</span> <span class="tok-mi">30</span><span class="tok-p">,</span> <span class="tok-mi">40</span><span class="tok-p">,</span> <span class="tok-mi">60</span><span class="tok-p">)</span> <span class="tok-c1">-- body</span>

  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">setColor</span><span class="tok-p">(</span><span class="tok-mi">255</span><span class="tok-p">,</span> <span class="tok-mi">0</span><span class="tok-p">,</span> <span class="tok-mi">0</span><span class="tok-p">)</span>               <span class="tok-c1">-- red</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">circle</span><span class="tok-p">(</span><span class="tok-s2">&quot;</span><span class="tok-s">fill&quot;</span><span class="tok-p">,</span> <span class="tok-mi">50</span><span class="tok-p">,</span> <span class="tok-mi">20</span><span class="tok-p">,</span> <span class="tok-mi">15</span><span class="tok-p">)</span>        <span class="tok-c1">-- head</span>
<span class="tok-k">end</span></code></pre></div></div></div></div>
<div class="livecode">
        <canvas id="world1/03_starting-small/stickman-canvas" data-module="world1/03_starting-small/stickman"></canvas>
        <script>(function () {
    var canvas = document.getElementById('world1/03_starting-small/stickman-canvas');
    var Module = {
        arguments: ['./'],
        printErr: console.error.bind(console),
        setStatus: function (e) {
            if (!e && Module.didSyncFS && Module.remainingDependencies === 0)
                Module.callMain(Module.arguments);
        },
        canvas: canvas,
        didSyncFS: false,
        totalDependencies: 0,
        remainingDependencies: 0,
        expectedDataFileDownloads: 1,
        finishedDataFileDownloads: 0,
        monitorRunDependencies: function(left) {
          this.remainingDependencies = left;
          this.totalDependencies = Math.max(this.totalDependencies, left);
        },
        preRun: [function(){ Module.ENV.SDL_EMSCRIPTEN_KEYBOARD_ELEMENT = "#canvas"; }]
    };
    canvas.module = Module;

    function runWithFS () {
      var fileData1 = [];
fileData1.push.apply(fileData1, [102, 117, 110, 99, 116, 105, 111, 110, 32, 108, 111, 118, 101, 46, 100, 114, 97, 119, 40, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 115, 101, 116, 67, 111, 108, 111, 114, 40, 50, 53, 53, 44, 32, 50, 53, 53, 44, 32, 50, 53, 53, 41, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 45, 32, 119, 104, 105, 116, 101, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 108, 105, 110, 101, 40, 52, 48, 44, 32, 57, 48, 44, 32, 51, 53, 44, 32, 49, 50, 48, 41, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 45, 32, 108, 101, 102, 116, 32, 102, 111, 111, 116, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 108, 105, 110, 101, 40, 54, 48, 44, 32, 57, 48, 44, 32, 54, 53, 44, 32, 49, 50, 48, 41, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 45, 32, 114, 105, 103, 104, 116, 32, 102, 111, 111, 116, 10, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 115, 101, 116, 67, 111, 108, 111, 114, 40, 48, 44, 32, 50, 53, 53, 44, 32, 48, 41, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 45, 32, 103, 114, 101, 101, 110, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 114, 101, 99, 116, 97, 110, 103, 108, 101, 40, 34, 102, 105, 108, 108, 34, 44, 32, 51, 48, 44, 32, 51, 48, 44, 32, 52, 48, 44, 32, 54, 48, 41, 32, 45, 45, 32, 98, 111, 100, 121, 10, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 115, 101, 116, 67, 111, 108, 111, 114, 40, 50, 53, 53, 44, 32, 48, 44, 32, 48, 41, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45, 45, 32, 114, 101, 100, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 99, 105, 114, 99, 108, 101, 40, 34, 102, 105, 108, 108, 34, 44, 32, 53, 48, 44, 32, 50, 48, 44, 32, 49, 53, 41, 32, 32, 32, 32, 32, 32, 32, 32, 45, 45, 32, 104, 101, 97, 100, 10, 101, 110, 100, 10]);
Module['FS_createDataFile']('.', 'main.lua', fileData1, true, true);
    }

    if (Module['calledRun']) {
      runWithFS();
    } else {
      if (!Module['preRun']) Module['preRun'] = [];
      Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
    }

    window.mod = Module;
})();
</script>
      </div>
<div class="admonitionblock note"><table><tr><td class="icon"><div class="title">Note</div></td><td class="content">Note how the head is in front of and the feet are behind the body
because of the order we chose to draw them in.</td></tr></table></div>
<div class="paragraph"><p>LÖVE provides a lot more drawing operations and related functions,
but for now we will stick with those above.
You can find the whole list on the <a href="https://love2d.org/wiki/love.graphics"><code>wiki</code></a>.
&lt;&lt;&lt;</p></div></div></div>
<div class="sect2"><h3 id="world1-4">World 1-4: Creating Motion</h3><div class="paragraph"><p><a href="#world1-3">Last time</a> we managed to draw a terrible-looking stickman,
but he seemed rather&#8230;&#8203; lifeless.
If we want to make a game, it might be a good idea to have things moving around.</p></div>
<div class="sect3"><h4 id="_a_ship">A Ship</h4><div class="paragraph"><p>As we are working towards an Asteroids clone, let&#8217;s start out with a spaceship.
Before we can make a spaceship move, we need a spaceship though:</p></div>
<div class="openblock"><div class="content"><div class="listingblock"><div class="title">main.lua</div>
<div class="content"><pre class="pygments highlight"><code data-lang="lua"><span class="tok-k">function</span> <span class="tok-nc">love</span><span class="tok-p">.</span><span class="tok-nf">draw</span><span class="tok-p">()</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">setColor</span><span class="tok-p">(</span><span class="tok-mi">200</span><span class="tok-p">,</span> <span class="tok-mi">200</span><span class="tok-p">,</span> <span class="tok-mi">200</span><span class="tok-p">)</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">rectangle</span><span class="tok-p">(</span><span class="tok-s2">&quot;</span><span class="tok-s">fill&quot;</span><span class="tok-p">,</span> <span class="tok-mi">20</span><span class="tok-p">,</span> <span class="tok-mi">20</span><span class="tok-p">,</span> <span class="tok-mi">100</span><span class="tok-p">,</span> <span class="tok-mi">20</span><span class="tok-p">)</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">setColor</span><span class="tok-p">(</span><span class="tok-mi">80</span><span class="tok-p">,</span> <span class="tok-mi">80</span><span class="tok-p">,</span> <span class="tok-mi">80</span><span class="tok-p">)</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">line</span><span class="tok-p">(</span><span class="tok-mi">70</span><span class="tok-p">,</span> <span class="tok-mi">30</span><span class="tok-p">,</span> <span class="tok-mi">120</span><span class="tok-p">,</span> <span class="tok-mi">30</span><span class="tok-p">)</span>
<span class="tok-k">end</span></code></pre></div></div></div></div>
<div class="livecode">
        <canvas id="world1/04_creating-motion/a-ship-canvas" data-module="world1/04_creating-motion/a-ship"></canvas>
        <script>(function () {
    var canvas = document.getElementById('world1/04_creating-motion/a-ship-canvas');
    var Module = {
        arguments: ['./'],
        printErr: console.error.bind(console),
        setStatus: function (e) {
            if (!e && Module.didSyncFS && Module.remainingDependencies === 0)
                Module.callMain(Module.arguments);
        },
        canvas: canvas,
        didSyncFS: false,
        totalDependencies: 0,
        remainingDependencies: 0,
        expectedDataFileDownloads: 1,
        finishedDataFileDownloads: 0,
        monitorRunDependencies: function(left) {
          this.remainingDependencies = left;
          this.totalDependencies = Math.max(this.totalDependencies, left);
        },
        preRun: [function(){ Module.ENV.SDL_EMSCRIPTEN_KEYBOARD_ELEMENT = "#canvas"; }]
    };
    canvas.module = Module;

    function runWithFS () {
      var fileData1 = [];
fileData1.push.apply(fileData1, [102, 117, 110, 99, 116, 105, 111, 110, 32, 108, 111, 118, 101, 46, 100, 114, 97, 119, 40, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 115, 101, 116, 67, 111, 108, 111, 114, 40, 50, 48, 48, 44, 32, 50, 48, 48, 44, 32, 50, 48, 48, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 114, 101, 99, 116, 97, 110, 103, 108, 101, 40, 34, 102, 105, 108, 108, 34, 44, 32, 50, 48, 44, 32, 50, 48, 44, 32, 49, 48, 48, 44, 32, 50, 48, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 115, 101, 116, 67, 111, 108, 111, 114, 40, 56, 48, 44, 32, 56, 48, 44, 32, 56, 48, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 108, 105, 110, 101, 40, 55, 48, 44, 32, 51, 48, 44, 32, 49, 50, 48, 44, 32, 51, 48, 41, 10, 101, 110, 100, 10]);
Module['FS_createDataFile']('.', 'main.lua', fileData1, true, true);
    }

    if (Module['calledRun']) {
      runWithFS();
    } else {
      if (!Module['preRun']) Module['preRun'] = [];
      Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
    }

    window.mod = Module;
})();
</script>
      </div>
<div class="paragraph"><p>I know, I know, that doesn&#8217;t look very aerodynamic.
But I&#8217;ll tell you what, there&#8217;s no air resistance in space anyway -
at least there&#8217;s a line to indicate which direction we are facing.</p></div></div>
<div class="sect3"><h4 id="_an_engine">An Engine</h4><div class="paragraph"><p>Alright, so how do we make this thing move?
We will obviously need a variable to keep track of it&#8217;s current position.
In fact we will be using two, one for each coordinate we are going to simulate the ship on:</p></div>
<div class="listingblock"><div class="title">main.lua</div>
<div class="content"><pre class="pygments highlight"><code data-lang="lua">x, y = 20, 20

function love.draw()
  love.graphics.setColor(80, 80, 80)
  love.graphics.rectangle("fill", x, y, 100, 20)
  love.graphics.setColor(200, 200, 200)
  love.graphics.line(x+20, y+10, x+100, y+10)
end</code></pre></div></div>
<div class="paragraph"><p>Now we only need to change the values of <code>x</code> and <code>y</code> and the ship will follow.
We could for example make them always point to the current mouse position:</p></div>
<div class="openblock"><div class="content"><div class="listingblock"><div class="title">main.lua</div>
<div class="content"><pre class="pygments highlight"><code data-lang="lua"><span class="tok-n">x</span><span class="tok-p">,</span> <span class="tok-n">y</span> <span class="tok-o">=</span> <span class="tok-mi">20</span><span class="tok-p">,</span> <span class="tok-mi">20</span>

<span class="tok-k">function</span> <span class="tok-nc">love</span><span class="tok-p">.</span><span class="tok-nf">update</span><span class="tok-p">(</span><span class="tok-n">dt</span><span class="tok-p">)</span>
  <span class="tok-n">x</span><span class="tok-p">,</span> <span class="tok-n">y</span> <span class="tok-o">=</span> <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">mouse</span><span class="tok-p">.</span><span class="tok-n">getPosition</span><span class="tok-p">()</span>
<span class="tok-k">end</span>

<span class="tok-k">function</span> <span class="tok-nc">love</span><span class="tok-p">.</span><span class="tok-nf">draw</span><span class="tok-p">()</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">setColor</span><span class="tok-p">(</span><span class="tok-mi">80</span><span class="tok-p">,</span> <span class="tok-mi">80</span><span class="tok-p">,</span> <span class="tok-mi">80</span><span class="tok-p">)</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">rectangle</span><span class="tok-p">(</span><span class="tok-s2">&quot;</span><span class="tok-s">fill&quot;</span><span class="tok-p">,</span> <span class="tok-n">x</span><span class="tok-p">,</span> <span class="tok-n">y</span><span class="tok-p">,</span> <span class="tok-mi">100</span><span class="tok-p">,</span> <span class="tok-mi">20</span><span class="tok-p">)</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">setColor</span><span class="tok-p">(</span><span class="tok-mi">200</span><span class="tok-p">,</span> <span class="tok-mi">200</span><span class="tok-p">,</span> <span class="tok-mi">200</span><span class="tok-p">)</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">line</span><span class="tok-p">(</span><span class="tok-n">x</span><span class="tok-o">+</span><span class="tok-mi">20</span><span class="tok-p">,</span> <span class="tok-n">y</span><span class="tok-o">+</span><span class="tok-mi">10</span><span class="tok-p">,</span> <span class="tok-n">x</span><span class="tok-o">+</span><span class="tok-mi">100</span><span class="tok-p">,</span> <span class="tok-n">y</span><span class="tok-o">+</span><span class="tok-mi">10</span><span class="tok-p">)</span>
<span class="tok-k">end</span></code></pre></div></div></div></div>
<div class="livecode">
        <canvas id="world1/04_creating-motion/an-engine-canvas" data-module="world1/04_creating-motion/an-engine"></canvas>
        <script>(function () {
    var canvas = document.getElementById('world1/04_creating-motion/an-engine-canvas');
    var Module = {
        arguments: ['./'],
        printErr: console.error.bind(console),
        setStatus: function (e) {
            if (!e && Module.didSyncFS && Module.remainingDependencies === 0)
                Module.callMain(Module.arguments);
        },
        canvas: canvas,
        didSyncFS: false,
        totalDependencies: 0,
        remainingDependencies: 0,
        expectedDataFileDownloads: 1,
        finishedDataFileDownloads: 0,
        monitorRunDependencies: function(left) {
          this.remainingDependencies = left;
          this.totalDependencies = Math.max(this.totalDependencies, left);
        },
        preRun: [function(){ Module.ENV.SDL_EMSCRIPTEN_KEYBOARD_ELEMENT = "#canvas"; }]
    };
    canvas.module = Module;

    function runWithFS () {
      var fileData1 = [];
fileData1.push.apply(fileData1, [120, 44, 32, 121, 32, 61, 32, 50, 48, 44, 32, 50, 48, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 108, 111, 118, 101, 46, 117, 112, 100, 97, 116, 101, 40, 100, 116, 41, 10, 32, 32, 120, 44, 32, 121, 32, 61, 32, 108, 111, 118, 101, 46, 109, 111, 117, 115, 101, 46, 103, 101, 116, 80, 111, 115, 105, 116, 105, 111, 110, 40, 41, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 108, 111, 118, 101, 46, 100, 114, 97, 119, 40, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 115, 101, 116, 67, 111, 108, 111, 114, 40, 56, 48, 44, 32, 56, 48, 44, 32, 56, 48, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 114, 101, 99, 116, 97, 110, 103, 108, 101, 40, 34, 102, 105, 108, 108, 34, 44, 32, 120, 44, 32, 121, 44, 32, 49, 48, 48, 44, 32, 50, 48, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 115, 101, 116, 67, 111, 108, 111, 114, 40, 50, 48, 48, 44, 32, 50, 48, 48, 44, 32, 50, 48, 48, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 108, 105, 110, 101, 40, 120, 43, 50, 48, 44, 32, 121, 43, 49, 48, 44, 32, 120, 43, 49, 48, 48, 44, 32, 121, 43, 49, 48, 41, 10, 101, 110, 100, 10]);
Module['FS_createDataFile']('.', 'main.lua', fileData1, true, true);
    }

    if (Module['calledRun']) {
      runWithFS();
    } else {
      if (!Module['preRun']) Module['preRun'] = [];
      Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
    }

    window.mod = Module;
})();
</script>
      </div>
<div class="paragraph"><p>Wait, what happened here?
First of all, I introduced a new LÖVE callback: <a href="https://love2d.org/wiki/love.update"><code>love.update</code></a>.
As the name implies, this is where we <em>update</em> the current game state.
<a href="https://love2d.org/wiki/love.update"><code>love.update</code></a> is where things <em>happen</em>; This is where the player moves,
the enemies shoot and the lighting is calculated.
One thing you might notice immediately is that unlike <a href="https://love2d.org/wiki/love.draw"><code>love.draw</code></a>,
<a href="https://love2d.org/wiki/love.update"><code>love.update</code></a> receives a parameter: <code>dt</code>.</p></div>
<div class="paragraph"><p><code>dt</code> is short for <strong>d</strong>elta<strong>time</strong> (<em>time difference</em>).
<code>dt</code> is always the time (in seconds) since the last time <a href="https://love2d.org/wiki/love.update"><code>love.update</code></a> was called.
In this small example <code>dt</code> is not used, but it is very useful, as we will see later on.</p></div>
<div class="paragraph"><p>Secondly, another LÖVE function has come into play: <a href="https://love2d.org/wiki/love.mouse.getPosition"><code>love.mouse.getPosition</code></a>.
It should again be rather obvious what this function is doing for us;
it returns the mouse&#8217;s current position along the x and y axis (in pixels).</p></div></div>
<div class="sect3"><h4 id="_keyboard_controls">Keyboard Controls</h4><div class="paragraph"><p>Alright, now things are moving, but in our game we don&#8217;t want the ship to be
controlled by the mouse.
Also, with the current code players with a faster mouse would have an advantage,
they could move around much more quickly.
Instead, let&#8217;s introduce a fixed speed for our spaceship, and add keyboard controls:</p></div>
<div class="openblock"><div class="content"><div class="listingblock"><div class="title">main.lua</div>
<div class="content"><pre class="pygments highlight"><code data-lang="lua"><span class="tok-n">player</span> <span class="tok-o">=</span> <span class="tok-p">{</span>
  <span class="tok-n">x</span> <span class="tok-o">=</span> <span class="tok-mi">20</span><span class="tok-p">,</span>
  <span class="tok-n">y</span> <span class="tok-o">=</span> <span class="tok-mi">20</span>
<span class="tok-p">}</span>

<span class="tok-n">SPEED</span> <span class="tok-o">=</span> <span class="tok-mi">300</span>

<span class="tok-k">function</span> <span class="tok-nc">love</span><span class="tok-p">.</span><span class="tok-nf">update</span><span class="tok-p">(</span><span class="tok-n">dt</span><span class="tok-p">)</span>
  <span class="tok-k">if</span> <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">keyboard</span><span class="tok-p">.</span><span class="tok-n">isDown</span><span class="tok-p">(</span><span class="tok-s2">&quot;</span><span class="tok-s">right&quot;</span><span class="tok-p">)</span> <span class="tok-k">then</span>
    <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">x</span> <span class="tok-o">=</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">x</span> <span class="tok-o">+</span> <span class="tok-n">SPEED</span><span class="tok-o">*</span><span class="tok-n">dt</span>
  <span class="tok-k">end</span>
  <span class="tok-k">if</span> <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">keyboard</span><span class="tok-p">.</span><span class="tok-n">isDown</span><span class="tok-p">(</span><span class="tok-s2">&quot;</span><span class="tok-s">left&quot;</span><span class="tok-p">)</span> <span class="tok-k">then</span>
    <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">x</span> <span class="tok-o">=</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">x</span> <span class="tok-o">-</span> <span class="tok-n">SPEED</span><span class="tok-o">*</span><span class="tok-n">dt</span>
  <span class="tok-k">end</span>
  <span class="tok-k">if</span> <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">keyboard</span><span class="tok-p">.</span><span class="tok-n">isDown</span><span class="tok-p">(</span><span class="tok-s2">&quot;</span><span class="tok-s">down&quot;</span><span class="tok-p">)</span> <span class="tok-k">then</span>
    <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">y</span> <span class="tok-o">=</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">y</span> <span class="tok-o">+</span> <span class="tok-n">SPEED</span><span class="tok-o">*</span><span class="tok-n">dt</span>
  <span class="tok-k">end</span>
  <span class="tok-k">if</span> <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">keyboard</span><span class="tok-p">.</span><span class="tok-n">isDown</span><span class="tok-p">(</span><span class="tok-s2">&quot;</span><span class="tok-s">up&quot;</span><span class="tok-p">)</span> <span class="tok-k">then</span>
    <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">y</span> <span class="tok-o">=</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">y</span> <span class="tok-o">-</span> <span class="tok-n">SPEED</span><span class="tok-o">*</span><span class="tok-n">dt</span>
  <span class="tok-k">end</span>
<span class="tok-k">end</span>

<span class="tok-k">function</span> <span class="tok-nc">love</span><span class="tok-p">.</span><span class="tok-nf">draw</span><span class="tok-p">()</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">setColor</span><span class="tok-p">(</span><span class="tok-mi">80</span><span class="tok-p">,</span> <span class="tok-mi">80</span><span class="tok-p">,</span> <span class="tok-mi">80</span><span class="tok-p">)</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">rectangle</span><span class="tok-p">(</span><span class="tok-s2">&quot;</span><span class="tok-s">fill&quot;</span><span class="tok-p">,</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">x</span><span class="tok-p">,</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">y</span><span class="tok-p">,</span> <span class="tok-mi">100</span><span class="tok-p">,</span> <span class="tok-mi">20</span><span class="tok-p">)</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">setColor</span><span class="tok-p">(</span><span class="tok-mi">200</span><span class="tok-p">,</span> <span class="tok-mi">200</span><span class="tok-p">,</span> <span class="tok-mi">200</span><span class="tok-p">)</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">line</span><span class="tok-p">(</span><span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">x</span><span class="tok-o">+</span><span class="tok-mi">20</span><span class="tok-p">,</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">y</span><span class="tok-o">+</span><span class="tok-mi">10</span><span class="tok-p">,</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">x</span><span class="tok-o">+</span><span class="tok-mi">100</span><span class="tok-p">,</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">y</span><span class="tok-o">+</span><span class="tok-mi">10</span><span class="tok-p">)</span>
<span class="tok-k">end</span></code></pre></div></div></div></div>
<div class="livecode">
        <canvas id="world1/04_creating-motion/keyboard-controls-canvas" data-module="world1/04_creating-motion/keyboard-controls"></canvas>
        <script>(function () {
    var canvas = document.getElementById('world1/04_creating-motion/keyboard-controls-canvas');
    var Module = {
        arguments: ['./'],
        printErr: console.error.bind(console),
        setStatus: function (e) {
            if (!e && Module.didSyncFS && Module.remainingDependencies === 0)
                Module.callMain(Module.arguments);
        },
        canvas: canvas,
        didSyncFS: false,
        totalDependencies: 0,
        remainingDependencies: 0,
        expectedDataFileDownloads: 1,
        finishedDataFileDownloads: 0,
        monitorRunDependencies: function(left) {
          this.remainingDependencies = left;
          this.totalDependencies = Math.max(this.totalDependencies, left);
        },
        preRun: [function(){ Module.ENV.SDL_EMSCRIPTEN_KEYBOARD_ELEMENT = "#canvas"; }]
    };
    canvas.module = Module;

    function runWithFS () {
      var fileData1 = [];
fileData1.push.apply(fileData1, [112, 108, 97, 121, 101, 114, 32, 61, 32, 123, 10, 32, 32, 120, 32, 61, 32, 50, 48, 44, 10, 32, 32, 121, 32, 61, 32, 50, 48, 10, 125, 10, 10, 83, 80, 69, 69, 68, 32, 61, 32, 51, 48, 48, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 108, 111, 118, 101, 46, 117, 112, 100, 97, 116, 101, 40, 100, 116, 41, 10, 32, 32, 105, 102, 32, 108, 111, 118, 101, 46, 107, 101, 121, 98, 111, 97, 114, 100, 46, 105, 115, 68, 111, 119, 110, 40, 34, 114, 105, 103, 104, 116, 34, 41, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 112, 108, 97, 121, 101, 114, 46, 120, 32, 61, 32, 112, 108, 97, 121, 101, 114, 46, 120, 32, 43, 32, 83, 80, 69, 69, 68, 42, 100, 116, 10, 32, 32, 101, 110, 100, 10, 32, 32, 105, 102, 32, 108, 111, 118, 101, 46, 107, 101, 121, 98, 111, 97, 114, 100, 46, 105, 115, 68, 111, 119, 110, 40, 34, 108, 101, 102, 116, 34, 41, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 112, 108, 97, 121, 101, 114, 46, 120, 32, 61, 32, 112, 108, 97, 121, 101, 114, 46, 120, 32, 45, 32, 83, 80, 69, 69, 68, 42, 100, 116, 10, 32, 32, 101, 110, 100, 10, 32, 32, 105, 102, 32, 108, 111, 118, 101, 46, 107, 101, 121, 98, 111, 97, 114, 100, 46, 105, 115, 68, 111, 119, 110, 40, 34, 100, 111, 119, 110, 34, 41, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 112, 108, 97, 121, 101, 114, 46, 121, 32, 61, 32, 112, 108, 97, 121, 101, 114, 46, 121, 32, 43, 32, 83, 80, 69, 69, 68, 42, 100, 116, 10, 32, 32, 101, 110, 100, 10, 32, 32, 105, 102, 32, 108, 111, 118, 101, 46, 107, 101, 121, 98, 111, 97, 114, 100, 46, 105, 115, 68, 111, 119, 110, 40, 34, 117, 112, 34, 41, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 112, 108, 97, 121, 101, 114, 46, 121, 32, 61, 32, 112, 108, 97, 121, 101, 114, 46, 121, 32, 45, 32, 83, 80, 69, 69, 68, 42, 100, 116, 10, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 108, 111, 118, 101, 46, 100, 114, 97, 119, 40, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 115, 101, 116, 67, 111, 108, 111, 114, 40, 56, 48, 44, 32, 56, 48, 44, 32, 56, 48, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 114, 101, 99, 116, 97, 110, 103, 108, 101, 40, 34, 102, 105, 108, 108, 34, 44, 32, 112, 108, 97, 121, 101, 114, 46, 120, 44, 32, 112, 108, 97, 121, 101, 114, 46, 121, 44, 32, 49, 48, 48, 44, 32, 50, 48, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 115, 101, 116, 67, 111, 108, 111, 114, 40, 50, 48, 48, 44, 32, 50, 48, 48, 44, 32, 50, 48, 48, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 108, 105, 110, 101, 40, 112, 108, 97, 121, 101, 114, 46, 120, 43, 50, 48, 44, 32, 112, 108, 97, 121, 101, 114, 46, 121, 43, 49, 48, 44, 32, 112, 108, 97, 121, 101, 114, 46, 120, 43, 49, 48, 48, 44, 32, 112, 108, 97, 121, 101, 114, 46, 121, 43, 49, 48, 41, 10, 101, 110, 100, 10]);
Module['FS_createDataFile']('.', 'main.lua', fileData1, true, true);
    }

    if (Module['calledRun']) {
      runWithFS();
    } else {
      if (!Module['preRun']) Module['preRun'] = [];
      Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
    }

    window.mod = Module;
})();
</script>
      </div>
<div class="paragraph"><p>Great, let&#8217;s go through the changes:
You can immediately see that <code>x</code> and <code>y</code> have disappeared,
instead there is now a table called <code>player.</code>
<code>player</code> stores the position under the keys <code>"x"</code> and <code>"y"</code>,
so nothing has really changed except the varible names are longer,
but I have done this so our code stays readable as we progress;
As we add enemies and bullets we will need to keep track of a lot more `x`s and `y`s.</p></div>
<div class="paragraph"><p>As we can see, I have also added a new variable called <code>SPEED</code>.
<code>SPEED</code> is never changed in the code, so I could&#8217;ve also replaced every occurence
further down with it&#8217;s value, <code>300</code> right away.
However keeping it at the top like this makes it easy to modify the speed,
also I cannot forget to modify it in all the places should I change it some time.
<code>SPEED</code> is uppercased because I use this style to name constant values,
but this is just a stylistic choice by me.</p></div>
<div class="paragraph"><p>Now on to the actual keyboard code!
There is another new LÖVE function used here: <a href="https://love2d.org/wiki/love.keyboard.isDown"><code>love.keyboard.isDown</code></a>.
Once again the name should make the purpose of the function very clear,
you should start to see a pattern here.
<a href="https://love2d.org/wiki/love.keyboard.isDown"><code>love.keyboard.isDown</code></a> checks if the key given is down.
In LÖVE keys are identified by a string,
in this example we are using <code>"up"</code>, <code>"down"</code> etc., but there are many more.
You can view a table of all the keys on the wiki: <a href="https://love2d.org/wiki/KeyConstant"><code>KeyConstant</code></a>.</p></div>
<div class="paragraph"><p>Using <code>if</code> and <a href="https://love2d.org/wiki/love.keyboard.isDown"><code>love.keyboard.isDown</code></a> we add or substract <code>SPEED * dt</code> from the fitting coordinates,
when the <em>left</em> key is pressed, we substract from <code>player.x</code>;
when <em>down</em> is pressed we add to the y-coordinate.</p></div>
<div class="paragraph"><p>Now, why do we multiply <code>SPEED</code> with <code>dt</code>?
As I said above, the time step between each <a href="https://love2d.org/wiki/love.update"><code>love.update</code></a> execution may vary;
for example a scene that has to draw a lot of enemies might take longer do draw
than one that just features a few.
Other factors like the power of the graphics card and processor
or how busy the computer is with other things might also impact the updaterate.</p></div>
<div class="paragraph"><p>It is important that we care about this,
a game that runs twice as fast on better hardware is unacceptable.
By multiplying with <code>dt</code> we can scale the speed by the time that we are actually simulating.</p></div>
<div class="admonitionblock note"><table><tr><td class="icon"><div class="title">Note</div></td><td class="content">This means we are also always "lagging a frame behind" in update-time,
but that doesn&#8217;t really make a difference in practice.</td></tr></table></div>
<div class="paragraph"><p>Because <code>dt</code> is measured in seconds, it also makes specifying movement speeds
etc. very convenient, <code>SPEED</code> is now measured in <strong>pixels per second</strong>. This gives
it a workable size and something you can think about; if we had not used <code>dt</code> we
would have to deal with tiny values in <strong>pixels per frame</strong>.
&lt;&lt;&lt;</p></div></div></div>
<div class="sect2"><h3 id="world1-5">World 1-5: Better Steering</h3><div class="paragraph"><p>Great, so now we can fly around!
A little realism would be nice though, spaceships don&#8217;t really fly like that.
It is time too look back to <a href="#world1-1-spaceship">World 1-1</a> and look at our notes for the spaceship:</p></div>
<div class="quoteblock"><blockquote><div class="paragraph"><p>The spaceship is the main thing the player can control in our game.
The player can use two keys to accelerate or decelerate in the direction the ship
is currently facing. He can also turn the spaceship with two other keys.
Lastly the player can press a button to fire a shot.</p></div>
<div class="paragraph"><p>When the spaceships leaves the screen on one side, it will enter from the opposite side,
keeping it&#8217;s velocity.</p></div>
<div class="paragraph"><p>We can see that the spaceship needs to have a <code>position</code>, <code>velocity</code> and <code>rotation</code>.
in <a href="#world1-4">World 1-5</a> we will see that the actual way of saving the information
we use differs, but we could as well do with this "definition".</p></div></blockquote><div class="attribution">&#8212; World 1-1, The Spaceship</div></div>
<div class="paragraph"><p>Okay, so let&#8217;s get to work:</p></div>
<div class="openblock"><div class="content"><div class="listingblock"><div class="title">main.lua</div>
<div class="content"><pre class="pygments highlight"><code data-lang="lua"><span class="tok-n">player</span> <span class="tok-o">=</span> <span class="tok-p">{</span>
  <span class="tok-n">x</span> <span class="tok-o">=</span> <span class="tok-mi">150</span><span class="tok-p">,</span>
  <span class="tok-n">y</span> <span class="tok-o">=</span> <span class="tok-mi">150</span><span class="tok-p">,</span>
  <span class="tok-n">xvel</span> <span class="tok-o">=</span> <span class="tok-mi">0</span><span class="tok-p">,</span>
  <span class="tok-n">yvel</span> <span class="tok-o">=</span> <span class="tok-mi">0</span><span class="tok-p">,</span>
  <span class="tok-n">rotation</span> <span class="tok-o">=</span> <span class="tok-mi">0</span>
<span class="tok-p">}</span>

<span class="tok-kd">local</span> <span class="tok-n">ANGACCEL</span>      <span class="tok-o">=</span> <span class="tok-mi">4</span>
<span class="tok-kd">local</span> <span class="tok-n">ACCELERATION</span>  <span class="tok-o">=</span> <span class="tok-mi">20</span>

<span class="tok-k">function</span> <span class="tok-nc">love</span><span class="tok-p">.</span><span class="tok-nf">update</span><span class="tok-p">(</span><span class="tok-n">dt</span><span class="tok-p">)</span>
  <span class="tok-k">if</span> <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">keyboard</span><span class="tok-p">.</span><span class="tok-n">isDown</span><span class="tok-s2">&quot;</span><span class="tok-s">right&quot;</span> <span class="tok-k">then</span>
    <span class="tok-c1">-- rotate clockwise</span>
    <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">rotation</span> <span class="tok-o">=</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">rotation</span> <span class="tok-o">+</span> <span class="tok-n">ANGACCEL</span><span class="tok-o">*</span><span class="tok-n">dt</span>
  <span class="tok-k">end</span>
  <span class="tok-k">if</span> <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">keyboard</span><span class="tok-p">.</span><span class="tok-n">isDown</span><span class="tok-s2">&quot;</span><span class="tok-s">left&quot;</span> <span class="tok-k">then</span>
    <span class="tok-c1">-- rotate counter-clockwise</span>
    <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">rotation</span> <span class="tok-o">=</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">rotation</span> <span class="tok-o">-</span> <span class="tok-n">ANGACCEL</span><span class="tok-o">*</span><span class="tok-n">dt</span>
  <span class="tok-k">end</span>
  <span class="tok-k">if</span> <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">keyboard</span><span class="tok-p">.</span><span class="tok-n">isDown</span><span class="tok-s2">&quot;</span><span class="tok-s">down&quot;</span> <span class="tok-k">then</span>
    <span class="tok-c1">-- decelerate / accelerate backwards</span>
    <span class="tok-c1">-- (left out for now)</span>
  <span class="tok-k">end</span>
  <span class="tok-k">if</span> <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">keyboard</span><span class="tok-p">.</span><span class="tok-n">isDown</span><span class="tok-s2">&quot;</span><span class="tok-s">up&quot;</span> <span class="tok-k">then</span>
    <span class="tok-c1">-- accelerate</span>
    <span class="tok-c1">-- (left out for now)</span>
  <span class="tok-k">end</span>
<span class="tok-k">end</span>

<span class="tok-k">function</span> <span class="tok-nc">love</span><span class="tok-p">.</span><span class="tok-nf">draw</span><span class="tok-p">()</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">setColor</span><span class="tok-p">(</span><span class="tok-mi">80</span><span class="tok-p">,</span> <span class="tok-mi">80</span><span class="tok-p">,</span> <span class="tok-mi">80</span><span class="tok-p">)</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">translate</span><span class="tok-p">(</span><span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">x</span><span class="tok-p">,</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">y</span><span class="tok-p">)</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">rotate</span><span class="tok-p">(</span><span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">rotation</span><span class="tok-p">)</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">rectangle</span><span class="tok-p">(</span><span class="tok-s2">&quot;</span><span class="tok-s">fill&quot;</span><span class="tok-p">,</span> <span class="tok-o">-</span><span class="tok-mi">50</span><span class="tok-p">,</span> <span class="tok-o">-</span><span class="tok-mi">10</span><span class="tok-p">,</span> <span class="tok-mi">100</span><span class="tok-p">,</span> <span class="tok-mi">20</span><span class="tok-p">)</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">setColor</span><span class="tok-p">(</span><span class="tok-mi">200</span><span class="tok-p">,</span> <span class="tok-mi">200</span><span class="tok-p">,</span> <span class="tok-mi">200</span><span class="tok-p">)</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">line</span><span class="tok-p">(</span><span class="tok-mi">20</span><span class="tok-p">,</span> <span class="tok-mi">0</span><span class="tok-p">,</span> <span class="tok-mi">50</span><span class="tok-p">,</span> <span class="tok-mi">0</span><span class="tok-p">)</span>
<span class="tok-k">end</span></code></pre></div></div></div></div>
<div class="livecode">
        <canvas id="world1/05_better-steering/rotation-canvas" data-module="world1/05_better-steering/rotation"></canvas>
        <script>(function () {
    var canvas = document.getElementById('world1/05_better-steering/rotation-canvas');
    var Module = {
        arguments: ['./'],
        printErr: console.error.bind(console),
        setStatus: function (e) {
            if (!e && Module.didSyncFS && Module.remainingDependencies === 0)
                Module.callMain(Module.arguments);
        },
        canvas: canvas,
        didSyncFS: false,
        totalDependencies: 0,
        remainingDependencies: 0,
        expectedDataFileDownloads: 1,
        finishedDataFileDownloads: 0,
        monitorRunDependencies: function(left) {
          this.remainingDependencies = left;
          this.totalDependencies = Math.max(this.totalDependencies, left);
        },
        preRun: [function(){ Module.ENV.SDL_EMSCRIPTEN_KEYBOARD_ELEMENT = "#canvas"; }]
    };
    canvas.module = Module;

    function runWithFS () {
      var fileData1 = [];
fileData1.push.apply(fileData1, [112, 108, 97, 121, 101, 114, 32, 61, 32, 123, 10, 32, 32, 120, 32, 61, 32, 49, 53, 48, 44, 10, 32, 32, 121, 32, 61, 32, 49, 53, 48, 44, 10, 32, 32, 120, 118, 101, 108, 32, 61, 32, 48, 44, 10, 32, 32, 121, 118, 101, 108, 32, 61, 32, 48, 44, 10, 32, 32, 114, 111, 116, 97, 116, 105, 111, 110, 32, 61, 32, 48, 10, 125, 10, 10, 108, 111, 99, 97, 108, 32, 65, 78, 71, 65, 67, 67, 69, 76, 32, 32, 32, 32, 32, 32, 61, 32, 52, 10, 108, 111, 99, 97, 108, 32, 65, 67, 67, 69, 76, 69, 82, 65, 84, 73, 79, 78, 32, 32, 61, 32, 50, 48, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 108, 111, 118, 101, 46, 117, 112, 100, 97, 116, 101, 40, 100, 116, 41, 10, 32, 32, 105, 102, 32, 108, 111, 118, 101, 46, 107, 101, 121, 98, 111, 97, 114, 100, 46, 105, 115, 68, 111, 119, 110, 34, 114, 105, 103, 104, 116, 34, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 45, 45, 32, 114, 111, 116, 97, 116, 101, 32, 99, 108, 111, 99, 107, 119, 105, 115, 101, 10, 32, 32, 32, 32, 112, 108, 97, 121, 101, 114, 46, 114, 111, 116, 97, 116, 105, 111, 110, 32, 61, 32, 112, 108, 97, 121, 101, 114, 46, 114, 111, 116, 97, 116, 105, 111, 110, 32, 43, 32, 65, 78, 71, 65, 67, 67, 69, 76, 42, 100, 116, 10, 32, 32, 101, 110, 100, 10, 32, 32, 105, 102, 32, 108, 111, 118, 101, 46, 107, 101, 121, 98, 111, 97, 114, 100, 46, 105, 115, 68, 111, 119, 110, 34, 108, 101, 102, 116, 34, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 45, 45, 32, 114, 111, 116, 97, 116, 101, 32, 99, 111, 117, 110, 116, 101, 114, 45, 99, 108, 111, 99, 107, 119, 105, 115, 101, 10, 32, 32, 32, 32, 112, 108, 97, 121, 101, 114, 46, 114, 111, 116, 97, 116, 105, 111, 110, 32, 61, 32, 112, 108, 97, 121, 101, 114, 46, 114, 111, 116, 97, 116, 105, 111, 110, 32, 45, 32, 65, 78, 71, 65, 67, 67, 69, 76, 42, 100, 116, 10, 32, 32, 101, 110, 100, 10, 32, 32, 105, 102, 32, 108, 111, 118, 101, 46, 107, 101, 121, 98, 111, 97, 114, 100, 46, 105, 115, 68, 111, 119, 110, 34, 100, 111, 119, 110, 34, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 45, 45, 32, 100, 101, 99, 101, 108, 101, 114, 97, 116, 101, 32, 47, 32, 97, 99, 99, 101, 108, 101, 114, 97, 116, 101, 32, 98, 97, 99, 107, 119, 97, 114, 100, 115, 10, 32, 32, 32, 32, 45, 45, 32, 40, 108, 101, 102, 116, 32, 111, 117, 116, 32, 102, 111, 114, 32, 110, 111, 119, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 105, 102, 32, 108, 111, 118, 101, 46, 107, 101, 121, 98, 111, 97, 114, 100, 46, 105, 115, 68, 111, 119, 110, 34, 117, 112, 34, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 45, 45, 32, 97, 99, 99, 101, 108, 101, 114, 97, 116, 101, 10, 32, 32, 32, 32, 45, 45, 32, 40, 108, 101, 102, 116, 32, 111, 117, 116, 32, 102, 111, 114, 32, 110, 111, 119, 41, 10, 32, 32, 101, 110, 100, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 108, 111, 118, 101, 46, 100, 114, 97, 119, 40, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 115, 101, 116, 67, 111, 108, 111, 114, 40, 56, 48, 44, 32, 56, 48, 44, 32, 56, 48, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 40, 112, 108, 97, 121, 101, 114, 46, 120, 44, 32, 112, 108, 97, 121, 101, 114, 46, 121, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 114, 111, 116, 97, 116, 101, 40, 112, 108, 97, 121, 101, 114, 46, 114, 111, 116, 97, 116, 105, 111, 110, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 114, 101, 99, 116, 97, 110, 103, 108, 101, 40, 34, 102, 105, 108, 108, 34, 44, 32, 45, 53, 48, 44, 32, 45, 49, 48, 44, 32, 49, 48, 48, 44, 32, 50, 48, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 115, 101, 116, 67, 111, 108, 111, 114, 40, 50, 48, 48, 44, 32, 50, 48, 48, 44, 32, 50, 48, 48, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 108, 105, 110, 101, 40, 50, 48, 44, 32, 48, 44, 32, 53, 48, 44, 32, 48, 41, 10, 101, 110, 100, 10]);
Module['FS_createDataFile']('.', 'main.lua', fileData1, true, true);
    }

    if (Module['calledRun']) {
      runWithFS();
    } else {
      if (!Module['preRun']) Module['preRun'] = [];
      Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
    }

    window.mod = Module;
})();
</script>
      </div>
<div class="paragraph"><p>Okay, some changes.
We now store values for <code>xvel</code>, <code>yvel</code> and <code>rotation</code> in our <code>player</code> table.
<code>x</code> and <code>y</code> are still used to track the current position, but our <a href="https://love2d.org/wiki/love.draw"><code>love.draw</code></a> has changed,
<code>x</code> and <code>y</code> now refer to the center of the spaceship.
This is important so that the rotation looks realistic and the physics we introduce later work as expected.</p></div>
<div class="paragraph"><p>To draw the spaceship, we now use two new functions:
<a href="https://love2d.org/wiki/love.graphics.translate"><code>love.graphics.translate</code></a> and <a href="https://love2d.org/wiki/love.graphics.rotate"><code>love.graphics.rotate</code></a>.</p></div>
<div class="paragraph"><p>Using them is pretty straight-forward, <a href="https://love2d.org/wiki/love.graphics.translate"><code>love.graphics.translate</code></a>
moves everything that is drawn after it is called by the amount in <code>x</code> and <code>y</code>,
<a href="https://love2d.org/wiki/love.graphics.rotate"><code>love.graphics.rotate</code></a> rotates everything around the current point (0,0).
These two functions are called <strong>transformation functions</strong> because they <strong>transform</strong>
everything that is drawn afterwards. There are some more, like <a href="https://love2d.org/wiki/love.graphics.scale"><code>love.graphics.scale</code></a>,
but these will do for now.</p></div>
<div class="paragraph"><p>Note the order in which we call them, it is very important for the correct result!
You can try this by yourself: starting from the same point,
try rotating 90° to the left, then walking two steps,
then do those two movements in the opposite order.
You will end up in two different places.</p></div>
<div class="paragraph"><p>Our new <a href="https://love2d.org/wiki/love.update"><code>love.update</code></a> is also really simple for now, we just modify <code>rotation</code>.
I have introduced a new constant <code>ANGACCEL</code> (<strong>ang</strong>ular <strong>accel</strong>eration).
This is the angle that it should turn per second, note the use of <code>dt</code>,
just like in <a href="#world1-4">World 1-4</a>.</p></div>
<div class="paragraph"><p>Okay, so what about <code>xvel</code> and <code>yvel</code>? I skipped the actual <em>move</em>ment above,
but those are the <strong>vel</strong>ocities along the x- and y-axis.
We will store them seperately so that the player can drift around
(if we only stored the total velocity and assumed that it was always pointing
the same way the ship does then it would behave more like a car, with full traction).</p></div>
<div class="paragraph"><p>To implement those two left-out pieces of code we need some very basic trigonometry.
When the <code>up</code> key is pressed, we want to add velocity in the direction the ship
is currently pointing. When we press <code>down</code> the opposite should happen.</p></div>
<div class="paragraph"><p>We will need to use <code>math.sin</code> and <code>math.cos</code> to calculate the parts of the
acceleration that apply to each axis, based on the angle the ship is rotated to:</p></div>
<div class="openblock"><div class="content"><div class="listingblock"><div class="title">main.lua</div>
<div class="content"><pre class="pygments highlight"><code data-lang="lua"><span class="tok-n">player</span> <span class="tok-o">=</span> <span class="tok-p">{</span>
  <span class="tok-n">x</span> <span class="tok-o">=</span> <span class="tok-mi">150</span><span class="tok-p">,</span>
  <span class="tok-n">y</span> <span class="tok-o">=</span> <span class="tok-mi">150</span><span class="tok-p">,</span>
  <span class="tok-n">xvel</span> <span class="tok-o">=</span> <span class="tok-mi">0</span><span class="tok-p">,</span>
  <span class="tok-n">yvel</span> <span class="tok-o">=</span> <span class="tok-mi">0</span><span class="tok-p">,</span>
  <span class="tok-n">rotation</span> <span class="tok-o">=</span> <span class="tok-mi">0</span>
<span class="tok-p">}</span>

<span class="tok-kd">local</span> <span class="tok-n">ANGACCEL</span>      <span class="tok-o">=</span> <span class="tok-mi">4</span>
<span class="tok-kd">local</span> <span class="tok-n">ACCELERATION</span>  <span class="tok-o">=</span> <span class="tok-mi">400</span>

<span class="tok-k">function</span> <span class="tok-nc">love</span><span class="tok-p">.</span><span class="tok-nf">update</span><span class="tok-p">(</span><span class="tok-n">dt</span><span class="tok-p">)</span>
  <span class="tok-k">if</span> <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">keyboard</span><span class="tok-p">.</span><span class="tok-n">isDown</span><span class="tok-s2">&quot;</span><span class="tok-s">right&quot;</span> <span class="tok-k">then</span>
    <span class="tok-c1">-- rotate clockwise</span>
    <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">rotation</span> <span class="tok-o">=</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">rotation</span> <span class="tok-o">+</span> <span class="tok-n">ANGACCEL</span><span class="tok-o">*</span><span class="tok-n">dt</span>
  <span class="tok-k">end</span>
  <span class="tok-k">if</span> <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">keyboard</span><span class="tok-p">.</span><span class="tok-n">isDown</span><span class="tok-s2">&quot;</span><span class="tok-s">left&quot;</span> <span class="tok-k">then</span>
    <span class="tok-c1">-- rotate counter-clockwise</span>
    <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">rotation</span> <span class="tok-o">=</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">rotation</span> <span class="tok-o">-</span> <span class="tok-n">ANGACCEL</span><span class="tok-o">*</span><span class="tok-n">dt</span>
  <span class="tok-k">end</span>
  <span class="tok-k">if</span> <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">keyboard</span><span class="tok-p">.</span><span class="tok-n">isDown</span><span class="tok-s2">&quot;</span><span class="tok-s">down&quot;</span> <span class="tok-k">then</span>
    <span class="tok-c1">-- decelerate / accelerate backwards</span>
    <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">xvel</span> <span class="tok-o">=</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">xvel</span> <span class="tok-o">-</span> <span class="tok-n">ACCELERATION</span><span class="tok-o">*</span><span class="tok-n">dt</span> <span class="tok-o">*</span> <span class="tok-nb">math.cos</span><span class="tok-p">(</span><span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">rotation</span><span class="tok-p">)</span>
    <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">yvel</span> <span class="tok-o">=</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">yvel</span> <span class="tok-o">-</span> <span class="tok-n">ACCELERATION</span><span class="tok-o">*</span><span class="tok-n">dt</span> <span class="tok-o">*</span> <span class="tok-nb">math.sin</span><span class="tok-p">(</span><span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">rotation</span><span class="tok-p">)</span>
  <span class="tok-k">end</span>
  <span class="tok-k">if</span> <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">keyboard</span><span class="tok-p">.</span><span class="tok-n">isDown</span><span class="tok-s2">&quot;</span><span class="tok-s">up&quot;</span> <span class="tok-k">then</span>
    <span class="tok-c1">-- accelerate</span>
    <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">xvel</span> <span class="tok-o">=</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">xvel</span> <span class="tok-o">+</span> <span class="tok-n">ACCELERATION</span><span class="tok-o">*</span><span class="tok-n">dt</span> <span class="tok-o">*</span> <span class="tok-nb">math.cos</span><span class="tok-p">(</span><span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">rotation</span><span class="tok-p">)</span>
    <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">yvel</span> <span class="tok-o">=</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">yvel</span> <span class="tok-o">+</span> <span class="tok-n">ACCELERATION</span><span class="tok-o">*</span><span class="tok-n">dt</span> <span class="tok-o">*</span> <span class="tok-nb">math.sin</span><span class="tok-p">(</span><span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">rotation</span><span class="tok-p">)</span>
  <span class="tok-k">end</span>
  <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">x</span> <span class="tok-o">=</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">x</span> <span class="tok-o">+</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">xvel</span><span class="tok-o">*</span><span class="tok-n">dt</span>
  <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">y</span> <span class="tok-o">=</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">y</span> <span class="tok-o">+</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">yvel</span><span class="tok-o">*</span><span class="tok-n">dt</span>
  <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">xvel</span> <span class="tok-o">=</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">xvel</span> <span class="tok-o">*</span> <span class="tok-mf">0.99</span>
  <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">yvel</span> <span class="tok-o">=</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">yvel</span> <span class="tok-o">*</span> <span class="tok-mf">0.99</span>
<span class="tok-k">end</span>

<span class="tok-k">function</span> <span class="tok-nc">love</span><span class="tok-p">.</span><span class="tok-nf">draw</span><span class="tok-p">()</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">setColor</span><span class="tok-p">(</span><span class="tok-mi">80</span><span class="tok-p">,</span> <span class="tok-mi">80</span><span class="tok-p">,</span> <span class="tok-mi">80</span><span class="tok-p">)</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">translate</span><span class="tok-p">(</span><span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">x</span><span class="tok-p">,</span> <span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">y</span><span class="tok-p">)</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">rotate</span><span class="tok-p">(</span><span class="tok-n">player</span><span class="tok-p">.</span><span class="tok-n">rotation</span><span class="tok-p">)</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">rectangle</span><span class="tok-p">(</span><span class="tok-s2">&quot;</span><span class="tok-s">fill&quot;</span><span class="tok-p">,</span> <span class="tok-o">-</span><span class="tok-mi">50</span><span class="tok-p">,</span> <span class="tok-o">-</span><span class="tok-mi">10</span><span class="tok-p">,</span> <span class="tok-mi">100</span><span class="tok-p">,</span> <span class="tok-mi">20</span><span class="tok-p">)</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">setColor</span><span class="tok-p">(</span><span class="tok-mi">200</span><span class="tok-p">,</span> <span class="tok-mi">200</span><span class="tok-p">,</span> <span class="tok-mi">200</span><span class="tok-p">)</span>
  <span class="tok-n">love</span><span class="tok-p">.</span><span class="tok-n">graphics</span><span class="tok-p">.</span><span class="tok-n">line</span><span class="tok-p">(</span><span class="tok-mi">20</span><span class="tok-p">,</span> <span class="tok-mi">0</span><span class="tok-p">,</span> <span class="tok-mi">50</span><span class="tok-p">,</span> <span class="tok-mi">0</span><span class="tok-p">)</span>
<span class="tok-k">end</span></code></pre></div></div></div></div>
<div class="admonitionblock note"><table><tr><td class="icon"><div class="title">Note</div></td><td class="content">Note how again <code>ACCELERATION</code> is multiplied by <code>dt</code> before being scaled by
<code>math.cos</code> and <code>math.sin</code> for the corresponding axis.</td></tr></table></div>
<div class="paragraph"><p>This already feels a lot like Asteroids!</p></div>
<div class="livecode">
        <canvas id="world1/05_better-steering/momentum-canvas" data-module="world1/05_better-steering/momentum"></canvas>
        <script>(function () {
    var canvas = document.getElementById('world1/05_better-steering/momentum-canvas');
    var Module = {
        arguments: ['./'],
        printErr: console.error.bind(console),
        setStatus: function (e) {
            if (!e && Module.didSyncFS && Module.remainingDependencies === 0)
                Module.callMain(Module.arguments);
        },
        canvas: canvas,
        didSyncFS: false,
        totalDependencies: 0,
        remainingDependencies: 0,
        expectedDataFileDownloads: 1,
        finishedDataFileDownloads: 0,
        monitorRunDependencies: function(left) {
          this.remainingDependencies = left;
          this.totalDependencies = Math.max(this.totalDependencies, left);
        },
        preRun: [function(){ Module.ENV.SDL_EMSCRIPTEN_KEYBOARD_ELEMENT = "#canvas"; }]
    };
    canvas.module = Module;

    function runWithFS () {
      var fileData1 = [];
fileData1.push.apply(fileData1, [112, 108, 97, 121, 101, 114, 32, 61, 32, 123, 10, 32, 32, 120, 32, 61, 32, 49, 53, 48, 44, 10, 32, 32, 121, 32, 61, 32, 49, 53, 48, 44, 10, 32, 32, 120, 118, 101, 108, 32, 61, 32, 48, 44, 10, 32, 32, 121, 118, 101, 108, 32, 61, 32, 48, 44, 10, 32, 32, 114, 111, 116, 97, 116, 105, 111, 110, 32, 61, 32, 48, 10, 125, 10, 10, 108, 111, 99, 97, 108, 32, 65, 78, 71, 65, 67, 67, 69, 76, 32, 32, 32, 32, 32, 32, 61, 32, 52, 10, 108, 111, 99, 97, 108, 32, 65, 67, 67, 69, 76, 69, 82, 65, 84, 73, 79, 78, 32, 32, 61, 32, 52, 48, 48, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 108, 111, 118, 101, 46, 117, 112, 100, 97, 116, 101, 40, 100, 116, 41, 10, 32, 32, 105, 102, 32, 108, 111, 118, 101, 46, 107, 101, 121, 98, 111, 97, 114, 100, 46, 105, 115, 68, 111, 119, 110, 34, 114, 105, 103, 104, 116, 34, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 45, 45, 32, 114, 111, 116, 97, 116, 101, 32, 99, 108, 111, 99, 107, 119, 105, 115, 101, 10, 32, 32, 32, 32, 112, 108, 97, 121, 101, 114, 46, 114, 111, 116, 97, 116, 105, 111, 110, 32, 61, 32, 112, 108, 97, 121, 101, 114, 46, 114, 111, 116, 97, 116, 105, 111, 110, 32, 43, 32, 65, 78, 71, 65, 67, 67, 69, 76, 42, 100, 116, 10, 32, 32, 101, 110, 100, 10, 32, 32, 105, 102, 32, 108, 111, 118, 101, 46, 107, 101, 121, 98, 111, 97, 114, 100, 46, 105, 115, 68, 111, 119, 110, 34, 108, 101, 102, 116, 34, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 45, 45, 32, 114, 111, 116, 97, 116, 101, 32, 99, 111, 117, 110, 116, 101, 114, 45, 99, 108, 111, 99, 107, 119, 105, 115, 101, 10, 32, 32, 32, 32, 112, 108, 97, 121, 101, 114, 46, 114, 111, 116, 97, 116, 105, 111, 110, 32, 61, 32, 112, 108, 97, 121, 101, 114, 46, 114, 111, 116, 97, 116, 105, 111, 110, 32, 45, 32, 65, 78, 71, 65, 67, 67, 69, 76, 42, 100, 116, 10, 32, 32, 101, 110, 100, 10, 32, 32, 105, 102, 32, 108, 111, 118, 101, 46, 107, 101, 121, 98, 111, 97, 114, 100, 46, 105, 115, 68, 111, 119, 110, 34, 100, 111, 119, 110, 34, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 45, 45, 32, 100, 101, 99, 101, 108, 101, 114, 97, 116, 101, 32, 47, 32, 97, 99, 99, 101, 108, 101, 114, 97, 116, 101, 32, 98, 97, 99, 107, 119, 97, 114, 100, 115, 10, 32, 32, 32, 32, 112, 108, 97, 121, 101, 114, 46, 120, 118, 101, 108, 32, 61, 32, 112, 108, 97, 121, 101, 114, 46, 120, 118, 101, 108, 32, 45, 32, 65, 67, 67, 69, 76, 69, 82, 65, 84, 73, 79, 78, 42, 100, 116, 32, 42, 32, 109, 97, 116, 104, 46, 99, 111, 115, 40, 112, 108, 97, 121, 101, 114, 46, 114, 111, 116, 97, 116, 105, 111, 110, 41, 10, 32, 32, 32, 32, 112, 108, 97, 121, 101, 114, 46, 121, 118, 101, 108, 32, 61, 32, 112, 108, 97, 121, 101, 114, 46, 121, 118, 101, 108, 32, 45, 32, 65, 67, 67, 69, 76, 69, 82, 65, 84, 73, 79, 78, 42, 100, 116, 32, 42, 32, 109, 97, 116, 104, 46, 115, 105, 110, 40, 112, 108, 97, 121, 101, 114, 46, 114, 111, 116, 97, 116, 105, 111, 110, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 105, 102, 32, 108, 111, 118, 101, 46, 107, 101, 121, 98, 111, 97, 114, 100, 46, 105, 115, 68, 111, 119, 110, 34, 117, 112, 34, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 45, 45, 32, 97, 99, 99, 101, 108, 101, 114, 97, 116, 101, 10, 32, 32, 32, 32, 112, 108, 97, 121, 101, 114, 46, 120, 118, 101, 108, 32, 61, 32, 112, 108, 97, 121, 101, 114, 46, 120, 118, 101, 108, 32, 43, 32, 65, 67, 67, 69, 76, 69, 82, 65, 84, 73, 79, 78, 42, 100, 116, 32, 42, 32, 109, 97, 116, 104, 46, 99, 111, 115, 40, 112, 108, 97, 121, 101, 114, 46, 114, 111, 116, 97, 116, 105, 111, 110, 41, 10, 32, 32, 32, 32, 112, 108, 97, 121, 101, 114, 46, 121, 118, 101, 108, 32, 61, 32, 112, 108, 97, 121, 101, 114, 46, 121, 118, 101, 108, 32, 43, 32, 65, 67, 67, 69, 76, 69, 82, 65, 84, 73, 79, 78, 42, 100, 116, 32, 42, 32, 109, 97, 116, 104, 46, 115, 105, 110, 40, 112, 108, 97, 121, 101, 114, 46, 114, 111, 116, 97, 116, 105, 111, 110, 41, 10, 32, 32, 101, 110, 100, 10, 32, 32, 112, 108, 97, 121, 101, 114, 46, 120, 32, 61, 32, 112, 108, 97, 121, 101, 114, 46, 120, 32, 43, 32, 112, 108, 97, 121, 101, 114, 46, 120, 118, 101, 108, 42, 100, 116, 10, 32, 32, 112, 108, 97, 121, 101, 114, 46, 121, 32, 61, 32, 112, 108, 97, 121, 101, 114, 46, 121, 32, 43, 32, 112, 108, 97, 121, 101, 114, 46, 121, 118, 101, 108, 42, 100, 116, 10, 32, 32, 112, 108, 97, 121, 101, 114, 46, 120, 118, 101, 108, 32, 61, 32, 112, 108, 97, 121, 101, 114, 46, 120, 118, 101, 108, 32, 42, 32, 48, 46, 57, 57, 10, 32, 32, 112, 108, 97, 121, 101, 114, 46, 121, 118, 101, 108, 32, 61, 32, 112, 108, 97, 121, 101, 114, 46, 121, 118, 101, 108, 32, 42, 32, 48, 46, 57, 57, 10, 101, 110, 100, 10, 10, 102, 117, 110, 99, 116, 105, 111, 110, 32, 108, 111, 118, 101, 46, 100, 114, 97, 119, 40, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 115, 101, 116, 67, 111, 108, 111, 114, 40, 56, 48, 44, 32, 56, 48, 44, 32, 56, 48, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 40, 112, 108, 97, 121, 101, 114, 46, 120, 44, 32, 112, 108, 97, 121, 101, 114, 46, 121, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 114, 111, 116, 97, 116, 101, 40, 112, 108, 97, 121, 101, 114, 46, 114, 111, 116, 97, 116, 105, 111, 110, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 114, 101, 99, 116, 97, 110, 103, 108, 101, 40, 34, 102, 105, 108, 108, 34, 44, 32, 45, 53, 48, 44, 32, 45, 49, 48, 44, 32, 49, 48, 48, 44, 32, 50, 48, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 115, 101, 116, 67, 111, 108, 111, 114, 40, 50, 48, 48, 44, 32, 50, 48, 48, 44, 32, 50, 48, 48, 41, 10, 32, 32, 108, 111, 118, 101, 46, 103, 114, 97, 112, 104, 105, 99, 115, 46, 108, 105, 110, 101, 40, 50, 48, 44, 32, 48, 44, 32, 53, 48, 44, 32, 48, 41, 10, 101, 110, 100, 10]);
Module['FS_createDataFile']('.', 'main.lua', fileData1, true, true);
    }

    if (Module['calledRun']) {
      runWithFS();
    } else {
      if (!Module['preRun']) Module['preRun'] = [];
      Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
    }

    window.mod = Module;
})();
</script>
      </div>
<div style="page-break-after: always;"></div></div></div>
<div class="sect1"><h2 id="world2">World 2: The Redo</h2><div class="sectionbody"><div class="paragraph"><p>So that was <a href="#world1">The Prototype</a>. In the last few levels we went from our idea to an actual playable game&#8230;&#8203; so what&#8217;s left to do?</p></div>
<div class="paragraph"><p>Well, it turns out there is <em>a lot!</em></p></div>
<div class="paragraph"><p>Even though the game so far is perfectly playable, some of the code has gotten messy during the development process.
Also we haven&#8217;t added any real art, sound effects or menu yet - everything that makes your game visually appealing to users is missing.
This is because in <a href="#world1">The Prototype</a> we only created a <em>prototype</em>, a smaller version of the game to explore the concepts we want to be in our final game.
Now it&#8217;s time to take a step further and build <strong>the <em>actual</em> game</strong>&#8230;&#8203;<br />
So lets <strong>redo</strong> this thing!</p></div>
<div style="page-break-after: always;"></div>
<div style="page-break-after: always;"></div></div></div>
<div class="sect2"><h3 id="world3">World 3: The Cookbook</h3><div style="page-break-after: always;"></div>
<div class="sect2"><h3 id="world3-">World 3-1: Object Pools</h3><div class="paragraph"><p><code>Object Pools</code> are one of the most widely used game development concepts used throughout all sorts of games.
The basic concept is very simple: when you have a lot of similar items, then handle them all at once instead of one by one.</p></div>
<div class="sect3"><h4 id="_the_basics">The Basics</h4><div class="paragraph"><p>Imagine we are working on a Galaga-type fixed shooter. Every frame we have to simulate and draw all the enemies and the player.
There are multiple types of enemies with different behaviours and graphics, but they all need to be drawn in <a href="https://love2d.org/wiki/love.draw"><code>love.draw</code></a> and updated in <code>love.update</code>.
We also need to handle all the bullets flying around.</p></div>
<div class="paragraph"><p>The simples way to handle all of this is just storing all these things in a list, then iterate over it in the two callbacks:</p></div>
<div class="listingblock"><div class="content"><pre class="pygments highlight"><code data-lang="lua">objects = {}
for i=1,20 do
  table.insert(objects, Enemy.new())
end
for i=1,20 do
  table.insert(objects, Bullet.new()) -- let's pretend someone actually fired these
end
player = Player.new()

function love.draw()
  for _,o in ipairs(objects) do <b class="conum">(1)</b>
    o:draw()
  end
  player:draw()
end

function love.update(dt)
  for _,o in ipairs(objects) do
    o:update(dt)
  end
  player:update(dt)
end</code></pre></div></div>
<div class="colist arabic"><ol><li><p><code>_</code> here is just a varible name, but it is a common convention to use it for any value we do not care about</p></li></ol></div>
<div class="paragraph"><p>So far, so obvious. But what happens when we need to remove things?
Whenever the player shoots an enemy down,
we will have to remove it from <code>objects</code> so we don&#8217;t use up all of the PCs memory in a matter of minutes.
The problem with using <code>table.remove()</code> is that it will update all the indices,
so that we can continue iterating over the list (which is a good thing),
but because of this we will skip the next enemy, which is inacceptable.</p></div>
<div class="paragraph"><p>The simplest solution iterating in reverse:</p></div>
<div class="listingblock"><div class="content"><pre class="pygments highlight"><code data-lang="lua">-- rest as above
function love.update(dt)
  for i=#objects,1,-1 do <b class="conum">(1)</b>
    objects[i]:update(dt)
    if objects[i].dead then
      table.remove(objects, i)
    end
  end
  player:update(dt)
end</code></pre></div></div>
<div class="colist arabic"><ol><li><p>because we iterate in reverse, we need to use a numeric for</p></li></ol></div>
<div class="paragraph"><p>This is a good start, but let&#8217;s take it a step further.</p></div></div>
<div class="sect3"><h4 id="_sets">Sets</h4><div class="paragraph"><p>Sets, in mathematics, are a like a bag of objects; the objects don&#8217;t have any order,
nor names or labels associated with them.
In Lua Sets are usually implemented as tables where key and value are the same:</p></div>
<div class="listingblock"><div class="content"><pre class="pygments highlight"><code data-lang="lua">objects = {}
for i=1,10 do
  local n = Enemy.new()
  objects[n] = n <b class="conum">(1)</b>
end
for i=1,10 do
  local n = Bullet.new()
  objects[n] = n
end
player = Player.new()

function love.draw()
  for _,o in pairs(objects) do <b class="conum">(2)</b>
    o:draw()
  end
  player:draw()
end</code></pre></div></div>
<div class="colist arabic"><ol><li><p>table index and value are both the enemy object itself</p></li><li><p>we now need to use <code>pairs()</code> instead of <code>ipairs()</code></p></li></ol></div>
<div class="paragraph"><p>You might ask what advantage this might have over a simple list. After all we lost the ability to order the objects!
One advantage of handling the list like this is that we now only have to care about the objects themselves;
whether we change, delete or add objects, we never have to know, let alone search for, the index of that object.
This means that we can now delete objects from basically everywhere in code (though that generally may hurt your code structure).</p></div>
<div class="paragraph"><p>Another cool thing about this way of handling Sets is that we can actually add labels to <strong>some</strong> objects in the table if we want to.
For example there is no need to treat the player as an exception anymore:</p></div>
<div class="listingblock"><div class="content"><pre class="pygments highlight"><code data-lang="lua">objects = {}
for i=1,10 do
  local n = Enemy.new()
  objects[n] = n
end
for i=1,10 do
  local n = Bullet.new()
  objects[n] = n
end
objects.player = Player.new() <b class="conum">(1)</b>

function love.draw()
  for _,o in pairs(objects)
    o:draw()
  end <b class="conum">(2)</b>
end

function love.update(dt)
  for _,o in pairs(objects)
    o:update(dt)
  end
end

function love.keypressed(key)
  object.player.handleKey(key) <b class="conum">(3)</b>
end</code></pre></div></div>
<div class="colist arabic"><ol><li><p>the player is now just yet another <code>object</code></p></li><li><p>we do not need to treat the player seperately anymore</p></li><li><p>yet we can still access him easily wherever we need to</p></li></ol></div>
<div class="admonitionblock warning"><table><tr><td class="icon"><div class="title">Warning</div></td><td class="content">When you start adding entries that use "custom" keys,
make sure you are operating on the value (the second loop parameter) when interating with <code>pairs()</code>!</td></tr></table></div></div>
<div class="sect3"><h4 id="_wrapping_up">Wrapping up</h4><div class="paragraph"><p>As always, this concept is explained here on a very small scale.
In an actual game project you would usually need multiple object pools for different things or layers.
Still, Sets and Object Pools are going to be a building block of more or less every game you will ever encounter,
so these small tricks might still be valuable information to you.
&lt;&lt;&lt;</p></div></div></div></div>
<div class="sect2"><h3 id="_license">License</h3><div class="paragraph"><p>This work is licensed under the Creative Commons Attribution-NonCommercial 4.0 International License (<em>CC BY-NC 4.0</em>).<br />
To view a copy of this license, visit <a class="bare" href="http://creativecommons.org/licenses/by-nc/4.0/">http://creativecommons.org/licenses/by-nc/4.0/</a>.</p></div>
<div class="sect2"><h3 id="_libraries_tools">Libraries &amp; Tools</h3><div class="ulist"><ul><li><p><a href="https://github.com/asciidoctor/asciidoctor">AsciiDoctor</a> renders this book</p></li><li><p><a href="http://moonshinejs.org/">Moonshine</a> and</p></li><li><p><a href="https://github.com/TannerRogalsky/punchdrunk">punchdrunk</a> by Tanner Rogalsky make LÖVE run in <strong>your</strong> browser</p></li><li><p>&#8230;&#8203;as does of course <a href="https://love2d.org/">LÖVE</a> (licensed under the zlib license), which this book is all about</p></li></ul></div>
<div class="paragraph"><p>wherever not listed above, these are licensed under the MIT License:</p></div>
<div class="literalblock"><div class="title">The MIT License</div>
<div class="content"><pre>Copyright (C) held by the respective authors, see the LICENSEs in the links provided above

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.</pre></div></div></div></div></div><div id="footer"><div id="footer-text"><br />Last updated 2016-02-16 00:49:47 CET</div></div></body></html>